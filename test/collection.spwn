extract obj_props

type @collection


let _collection_ind = 0;

impl @collection {
	new: (count: @number) {
		_collection_ind++;

		let slf = @collection::{
			indexer: ?g,
			reset_target: ?g,
			output_id: counter(?i),
			input_id: counter(?i),
			done_indicator: counter(?i),
			set_indicator: counter(20i),
			indexer_block: ?b,
			blocks: [?b for $ in 0..count],
			slots: [counter(?i) for $ in 0..count]
		};

		let slf._trigfuncs = {
			reset: !{
				slf.indexer.move_to(slf.reset_target, y_only=true, duration=0);
				wait()
				slf.indexer.move_to(slf.reset_target, x_only=true, duration=0);
			}
		}
		slf._trigfuncs.index = !{
			let ind1 = !{
				slf.indexer.move(20, 0, duration=0);
				wait()
				slf.input_id--;

				if slf.input_id > 0 {
					ind1!
				} else {
					slf.indexer.move(0, -10, duration=0);
					wait()
					slf._trigfuncs.reset!;
				}
			};
			ind1!;
		}

		let base_x = _collection_ind * 255;
		let base_y = 315;

		$.add(obj {
			OBJ_ID: 279,
			GROUPS: [slf.reset_target],
			X: base_x,
			Y: base_y
		});

		$.add(obj {
			OBJ_ID: 1816,
			ITEM: slf.indexer_block,
			GROUPS: [slf.indexer],
			X: base_x,
			Y: base_y,
			DYNAMIC_BLOCK: true
		});

		let i = 0;
		for b in slf.blocks {
			i++;
			$.add(obj {
				OBJ_ID: 1816,
				ITEM: b,
				X: base_x + (60*i),
				Y: base_y - 34
			});

			[[on(collision_exit(slf.indexer_block, b))]] !{
				if slf.set_indicator == 0 {
					slf.output_id = slf.slots[i-1];
					slf.done_indicator = 1;
				} else {
					slf.slots[i-1] = slf.output_id;
					slf.done_indicator = 1;
					wait(0.1)
				}
			}
		}

		return slf;
	},

	index: (self, deco: @macro, input: @number | @counter) {
		self.input_id = input;
		self.input_id++;
		self._trigfuncs.index!;
		self.set_indicator = 0;

		[[on(count(self.done_indicator.item, 1))]] !{
			self.done_indicator=0;
			wait(0.1)
			deco(self.output_id);
		}
	},

	set: (self, input: @number | @counter, value: @number | @counter) {
		self.input_id = input;
		self.input_id++;
		self.output_id = value;
		self.set_indicator++;
		//wait(0.1);
		self._trigfuncs.index!;

		while_loop(_=>self.done_indicator==0, (){wait()});
	}
}
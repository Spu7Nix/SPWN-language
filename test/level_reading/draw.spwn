extract obj_props

line_objs = [
    {id: 211, ratio: 1/1, scale: 1},
    {id: 1767, ratio: 8/3, scale: 15/4},
    {id: 579, ratio: 3/1, scale: 1},
    //{id: 1191, ratio: 4/1, scale: 1}, doesn't rotate about center
    {id: 1757, ratio: 15/1, scale: 2},
    //{id: 507, ratio: 20/1, scale: 1}, doesn't rotate about center
    {id: 1753, ratio: 30/1, scale: 1},
]

draw_line = (x1: @number, y1: @number, x2: @number, y2: @number, width: @number = 0.25, runtime_allowed: @bool = false) {
    
    line_length = $.sqrt((x1-x2)^2 + (y1-y2)^2)
    if line_length == 0 || width == 0 {
        return
    }
    
    line_ratio = line_length / (30*width)

    obj_rot = $.atan2(y2-y1,x2-x1)

    if line_ratio < 1 {
        mid_x = (x1+x2)/2
        mid_y = (y1+y2)/2
        draw_line(
            //sin and cos are switched here to result in a 90 degree rotation (technically transposition)
            mid_x + $.sin(obj_rot)*15*width,
            mid_y - $.cos(obj_rot)*15*width,
            mid_x - $.sin(obj_rot)*15*width,
            mid_y + $.cos(obj_rot)*15*width,
            line_length / 30,
            runtime_allowed
        )
        return
    }

    filtered_objs = line_objs.filter(el => el.ratio <= line_ratio)
    line_obj = filtered_objs[filtered_objs.length - 1]
    obj_scale = width / (1 / line_obj.scale / line_obj.ratio)

    obj_length = 30 / line_obj.scale * obj_scale

    amount = line_length / obj_length
    
    for i in 0..$.floor(amount) {
        pos = obj_length / 2 + i * obj_length
        $.add( obj{
            OBJ_ID: line_obj.id,
            ROTATION: -obj_rot * 180 / 3.141592,
            X: x1 + $.cos(obj_rot) * pos,
            Y: y1 + $.sin(obj_rot) * pos,
            SCALING: obj_scale,
        }, runtime_allowed)
    }

    if !(amount == $.floor(amount)) {
        $.add( obj{
            OBJ_ID: line_obj.id,
            ROTATION: -obj_rot * 180 / 3.141592,
            X: x2 - $.cos(obj_rot) * obj_length / 2,
            Y: y2 - $.sin(obj_rot) * obj_length / 2,
            SCALING: obj_scale,
        }, runtime_allowed)
    }
}

return {
    draw_line: draw_line,
}

extract obj_props

center = get_objects(GROUPS, g => 2g in g)[0]
thingy = @set::from(get_objects(GROUPS, g => 1g in g || 2g in g), center[X], center[Y])

d = (f, x) => (f(x+0.000001) - f(x)) / 0.000001
a = (f, x) => - $.atan( d(f, x) ) * 180 / PI

f1 = x => 2*$.sin(x/2)
f2 = x => 2*(x/2)^2/10
f3 = x => 2*$.fract(x/2)

let groups = []
let f1_results = []
let f2_results = []
let f3_results = []

origin = [15 + 30*30, 15 + 30*30]

let x = -18
while x <= 18 {
    g1 = ?g; g2 = ?g
    groups.push([g1, g2])
    o_x = origin[0] + x*30
    thingy.replace_group(1g, g1).replace_group(2g, g2).place(o_x, origin[1])
    f1_results.push([
        f1(x) * 30,
        a(f1, x),
    ])
    f2_results.push([
        f2(x) * 30,
        a(f2, x),
    ])
    f3_results.push([
        f3(x) * 30,
        a(f3, x),
    ])
    x += 0.7
}
for i in 0..groups.length {
    -> groups[i][0].follow(groups[i][1])
}
wait(3)
for i in 0..groups.length {
    -> groups[i][1].move_to_xy(y = origin[1] + f1_results[i][0], duration = 1, easing = EASE_IN_OUT)
    -> groups[i][0].rotate(groups[i][1], f1_results[i][1], 1, easing = EASE_IN_OUT)
}

wait(2)
for i in 0..groups.length {
    -> groups[i][1].move_to_xy(y = origin[1] + f2_results[i][0], duration = 1, easing = EASE_IN_OUT)
    -> groups[i][0].rotate(groups[i][1], f2_results[i][1] - f1_results[i][1], 1, easing = EASE_IN_OUT)
}
wait(2)
for i in 0..groups.length {
    -> groups[i][1].move_to_xy(y = origin[1] + f3_results[i][0], duration = 1, easing = EASE_IN_OUT)
    -> groups[i][0].rotate(groups[i][1], f3_results[i][1] - f2_results[i][1], 1, easing = EASE_IN_OUT)
}




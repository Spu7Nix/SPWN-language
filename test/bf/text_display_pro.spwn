type @textdisplay
spacing = 0.6 * 30
y_spacing = 20
impl @textdisplay {
    new: (offset: [@number], letters: @number) {
        extract obj_props
        order = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        writer = ?b
        writer_group = ?g
        let list = []
        //        I   N   C   O


        //WINCO
        for i in ..letters {

            group = ?g
            block = ?b

            default_pos = ?g
            group.alpha(0)
            default_pos.alpha(0)
            follow_group = (500g..515g)[i]

            // space
            // $.add(obj {
            //     OBJ_ID: 1816,
            //     X: offset[0] + i * spacing,
            //     Y: offset[1],
            //     GROUPS: follow_group,
            //     BLOCK_A: wincon[6],
            //     SCALING: 0.7,
            // })

            for ch in ..order.length {
                $.add(obj {
                    OBJ_ID: 914,
                    X: offset[0] + i * spacing + (ch + 1) * spacing * letters,
                    Y: offset[1],
                    TEXT: $.b64encode(order[ch]),
                    GROUPS: follow_group,
                    SCALING: 0.7,
                })
            }
            $.add(obj {
                OBJ_ID: 1816,
                X:  offset[0],
                Y:  offset[1] + i * y_spacing * 3 + 30 + y_spacing * 3,
                BLOCK_A: block,
                SCALING: 0.6,
                GROUPS: follow_group,
            })

            lock = !{
                group.follow(writer_group)
                follow_group.follow(writer_group)
                -> follow_group.pulse(0,0,0, hold = 0.05, fade_out = 0.15)
            }

            collision(block, writer).on(lock)

            $.add(obj {
                OBJ_ID: 1765,
                X:  offset[0] + i * spacing,
                Y:  offset[1],
                GROUPS: group,
            })
            $.add(obj {
                OBJ_ID: 1765,
                X:  offset[0] + i * spacing,
                Y:  offset[1],
                GROUPS: default_pos,
            })

            -> follow_group.follow(group)

            list.push({
                group,
                default_pos,
                lock,
                follow_group,
            })

        }

        //writer
        $.add(obj {
            OBJ_ID: 1816,
            X:  offset[0] + 30,
            Y:  offset[1] + 30,
            BLOCK_A: writer,
            GROUPS: writer_group,
            DYNAMIC_BLOCK: true,
        })

        writer_default = ?g
        $.add(obj {
            OBJ_ID: 1765,
            X:  offset[0] + 30,
            Y:  offset[1] + 30,
            GROUPS: writer_default,
        })


        return @textdisplay::{list, writer: writer_group, writer_default, letters}
    },
    write: (self, letter: @counter, speed = 3) {
        // temp = counter()
        // read_counter = () {
        //     read = !{
        //         mini_read = (num){
        //             letter.item.if_is(LARGER_THAN, num - 1, !{
        //                 letter.add(-num)
        //                 temp.add(num)
        //                 self.writer.move(-(spacing / 3) * self.letters * num, 0)
        //                 call_with_delay(@epsilon::{}, read)
        //             })
        //         }

        //         for i in 0..speed {
        //             mini_read(3^i)
        //         }
        //         letter.item.if_is(EQUAL_TO, 0, !{
        //             wait()
        //             if speed > 1  { suppress_signal(0.1) }
        //             -> return
        //         })
        //     }
        //     read!
        // }

        self.writer.move(0, y_spacing, 0)
        -> if letter < 27 {
            -> self.writer.move(-5, 0, 0.2, easing = EXPONENTIAL_OUT)
            wait(0.05)
            // read_counter()
            // temp.add_to([letter], speed=speed)
            self.writer.move(-(spacing / 3) * self.letters * letter.to_const(..27), 0)
            wait(0.2)
            for l in self.list {
                l.lock.start_group.stop()
            }
            wait(0.05)
            self.writer.move_to(self.writer_default, x_only = true)
        }

    },

    reset: (self) {

        for letter in self.list {
            -> letter.follow_group.pulse(0,0,0, fade_in = 0.3, hold = 0.5)
        }
        wait(0.3)

        self.writer.move_to(self.writer_default)
        for letter in self.list {
            letter.group.move_to(letter.default_pos)
        }
    }
}

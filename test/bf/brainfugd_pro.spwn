RIGHT = ?b
LEFT = ?b
INCR = ?b
DECR = ?b
DOT = ?b
INPUT = ?b
OPEN = ?b //opening bracket
CLOSE = ?b //closing bracket

END = ?b //end of the program
NOOP = ?b //NO OPERATION

spacing = 10
extract obj_props

right_button = 901g
left_button = 902g

gs = {
    hidden_group: 976g,
    button_a: () {
		return collision(162b, 163b)
	},
	button_b: () {
		return touch(dual_side = true)
	},
}

abs = $.abs
import "text_display_pro.spwn"



ended = counter(false)




bc = [77, 93, 97]

left_buttons = [193c, 195c, 191c, 196c, 803c]

right_buttons = [192c, 194c,  802c, 212c]

activate_button = (activate, deactivate) {

    let colors = []



    if activate != null {
        if left_buttons.contains(activate) {
            colors = left_buttons
        } else {
            colors = right_buttons
        }
        for col in colors {
            if col == activate {
                -> col.set(bc[0], bc[1], bc[2], 0)
            } else {
                -> col.set(0, 0, 0, 0, blending = true)
            }
        }
    } else if deactivate != null {
        if left_buttons.contains(deactivate) {
            colors = left_buttons
        } else {
            colors = right_buttons
        }
        for col in colors {
            -> col.set(0, 0, 0, 0, blending = true)
        }
    }

}


type @bfreader
layers = counter(600i, bits = 4)
//layers.display(150, 300)
cell_pointer = 20g
input_layer = 21g

prog_pointer = 23g
prog_selector = 24g
force_stop_layer = 25g
input_layer.alpha(0)
//finished_layer.alpha(0)
force_stop_layer.alpha(0)

message_board = 931g


bottom_msg_board_up = (){
    -> message_board.move(0, 10, 1, easing = EXPONENTIAL_OUT)
    -> 216c.set(255, 255, 255, 1)
    -> 942g.move(0, 30, 0.5, easing = EXPONENTIAL_OUT)
}

bottom_msg_board_down = (){
    -> message_board.move(0, -10, 1, easing = EXPONENTIAL_IN)
    -> 216c.set(0, 0, 0, 1)
    -> 942g.move(0, -30, 0.5, easing = EXPONENTIAL_IN)
}

input_char = 26g

move_button = 10c
select_button = 11c

input_inc_button = 12c
input_done_button = 13c

input_mode = counter(false)
//input_mode.display(120, 30)
//input_used.display(90, 30)

prog_ptr_color = [94, 13, 13]
45c.set(prog_ptr_color[0], prog_ptr_color[1], prog_ptr_color[2], blending = true)

pulse_ptr = (){
    -> 972g.move(0, 1, 0.05, easing = EASE_IN)
    -> 973g.move(0, -1, 0.05, easing = EASE_IN)
    -> 974g.move(1, 0, 0.05, easing = EASE_IN)
    -> 975g.move(-1, 0, 0.05, easing = EASE_IN)

    -> 972g.move(0, -1, 0.2, easing = EASE_IN_OUT)
    -> 973g.move(0, 1, 0.2, easing = EASE_IN_OUT)
    -> 974g.move(-1, 0, 0.2, easing = EASE_IN_OUT)
    -> 975g.move(1, 0, 0.2, easing = EASE_IN_OUT)
}

// win_condition = "win"
// coin_condition = "coin tu"

mem_items = [62i, 54i, 63i, 64i, 58i, 55i, 65i, 60i, 59i, 66i]


force_stop = !{
    -> 45c.set(prog_ptr_color[0], prog_ptr_color[1], prog_ptr_color[2], blending = true)
    bottom_msg_board_up()

    //-> finished_color.set(255, 255, 255, 0)
    ended += 1
}

impl @bfreader {
    new: (script_offset: [@number], cell_count: @number) {

        std_out = @textdisplay::new([script_offset[0] + 1278, script_offset[1] - 66], 15)
        //$.print("hello")
        //-> BG.pulse(255, 0, 0, fade_out = 0.5)
        //-> std_out.write(counter(5))



        block = ?b
        group = ?g
        $.add(obj {
            OBJ_ID: 1816,
            X: script_offset[0] - spacing * 3,
            Y: script_offset[1],
            GROUPS: [group, gs.hidden_group],
            BLOCK_A: block,
            SCALING: 0.5,
            DYNAMIC_BLOCK: true,
        })
        // for b in [RIGHT,LEFT,INCR,DECR,DOT,OPEN,CLOSE] {
        //     $.add(obj {
        //         OBJ_ID: 1816,
        //         X: script_offset[0] - spacing * 3,
        //         Y: script_offset[1],
        //         SCALING: 0.5,
        //         BLOCK_A: b,
        //     })
        // }

        //start point
        start_point = ?g
        $.add(obj {
            OBJ_ID: 1765,
            X: script_offset[0] - spacing * 3,
            Y: script_offset[1],
            GROUPS: start_point
        })


        // CREATE CELLS
        let cells = []
        for i in ..cell_count {
            c = counter(mem_items[i], bits = 7)
            cells.push(c)
            //c.display(script_offset[0] + i * 30 + 300, script_offset[1] + 690)
        }
        ptr = counter(0, bits = 7)
        //ptr.display(script_offset[0], script_offset[1] + 60)
        std_in = counter(85i)
        //std_in.display(script_offset[0], script_offset[1] - 90)



        num_out = counter(61i, bits = 7)
        num_out.display(script_offset[0], script_offset[1] + 210)
        out = @bfreader::{
            group: group,
            right: counter(block.create_tracker_item(RIGHT), bits = 1),
            left:  counter(block.create_tracker_item(LEFT), bits = 1),
            incr:  counter(block.create_tracker_item(INCR), bits = 1),
            dot:   counter(block.create_tracker_item(DOT), bits = 1),
            input: counter(block.create_tracker_item(INPUT), bits = 1),
            decr:  counter(block.create_tracker_item(DECR), bits = 1),
            open:  counter(block.create_tracker_item(OPEN), bits = 1),
            close: counter(block.create_tracker_item(CLOSE), bits = 1),
            end:   counter(block.create_tracker_item(END), bits = 1),
            noop:  counter(block.create_tracker_item(NOOP), bits = 1),
            std_out: std_out,
            num_out: num_out,
            std_in: std_in,
            ptr: ptr,
            cells: cells,
            start_point: start_point
        }


        return out
    },
    currently_on: (self) {
        if self.right == 1 {
            return RIGHT
        } else if self.left == 1 {
            return LEFT
        } else if self.incr == 1 {
            return INCR
        } else if self.decr == 1 {
            return DECR
        } else if self.dot == 1 {
            return DOT
        } else if self.input == 1 {
            return INPUT
        } else if self.open == 1 {
            return OPEN
        } else if self.close == 1 {
            return CLOSE
        } else if self.noop == 1 {
            return NOOP
        }
    },
    current_cell: (self) => self.cells[self.ptr.to_const(..self.cells.length)],
    interpret: (self) {

        ret = !{
            -> self.group.move(spacing, 0, 0)
            -> return
        }

        // slow_ret = !{
        //     supress_signal(0.06)
        //     ret!
        // }

        current = self.currently_on()

        -> if current == RIGHT {

            if self.ptr == self.cells.length - 1 {
                wait()
                self.ptr -= self.cells.length - 1
                -> cell_pointer.move(-10 * (self.cells.length - 1),0, 0.1)
                ret!
            } else {
                wait()
                self.ptr += 1
                -> cell_pointer.move(10,0, 0.1)
                ret!
            }


        }
        -> if current == LEFT {
            if self.ptr == 0 {
                wait()
                self.ptr += self.cells.length - 1
                -> cell_pointer.move(10 * (self.cells.length - 1), 0, 0.1)
                ret!
            } else {
                wait()
                self.ptr -= 1
                -> cell_pointer.move(-10,0, 0.1)
                ret!
            }

        }
        -> if current == INCR {
            -> self.current_cell() += 1
            pulse_ptr()
            ret!
        }
        -> if current == DECR {
            -> (){
                cell = self.current_cell()
                //$.print(current)
                if cell > 0 {
                    cell -= 1
                }
            }()
            pulse_ptr()
            ret!
        }
        -> if current == DOT {

            () {
                self.num_out.reset()
                cell = self.current_cell()
                //wait()
                cell.copy_to([self.num_out], )
            } ()
            supress_signal(0.1) // DO NOT REMOVE VERY IMPORTANT APARENTLY
            // REQUIRED FOR TEXT TO WORK ON MOBILE FOR SOME REASON

            self.std_out.write(self.num_out, )

            ret!
        }
        -> if current == INPUT {
            //supress_signal(0.1)
            std_in = self.std_in
            -> input_layer.alpha(1, 0.5)



            done = !{

                activate_button(null, 802c)
                activate_button(null, 803c)

                -> input_done_button.pulse(52, 247, 68, fade_out = 0.3)
                -> input_layer.alpha(0, 0.5)
                cell = self.current_cell()
                cell.reset()
                std_in.add_to([cell], for_each = (n){ input_char.move(100 * n, 0, 0) })

                ret!
            }



            activate_button(802c, null)
            activate_button(803c, null)
            input_mode += 1

            gs.button_a().on_triggered(!{
                supress_signal(0.05)
                if input_mode == 1 {
                    -> input_inc_button.pulse(59, 144, 247, fade_out = 0.3)
                    std_in += 1
                    input_char.move(-100, 0, 0)
                }
            })
            gs.button_b().on_triggered(!{
                -> if input_mode == 1 {
                    input_mode -= 1
                    done!
                }
            })

        }
        -> if current == OPEN {
            move_to = !{
                -> 45c.set(prog_ptr_color[0] * 0.3, prog_ptr_color[1] * 0.3, prog_ptr_color[2] * 0.3, blending = true)
                //move to corresponding ]
                //layers = counter(0)
                condition = () => !(layers == 0 && self.close == 1)
                //self.group.move(spacing, 0)

                while_loop(condition, delay = 0.05, (){

                    
                    -> if self.open == 1{
                        layers += 1
                    }

                    -> if self.close == 1 {
                        layers -= 1
                    }

                    -> if self.end == 1 {

                        force_stop!
                    } else {
                        
                        self.group.move(spacing, 0)
                        
                    }


                })
                -> 45c.set(prog_ptr_color[0], prog_ptr_color[1], prog_ptr_color[2], blending = true)
                ret!
            }
            if self.current_cell() == 0 {
                layers -= 1
                call_with_delay(0.05, move_to)
            } else {
                ret!
            }
        }
        -> if current == CLOSE {
            move_back = !{
                -> 45c.set(prog_ptr_color[0] * 0.3, prog_ptr_color[1] * 0.3, prog_ptr_color[2] * 0.3, blending = true)
                //move back to corresponding [
                //layers = counter(0)
                condition = ()=> !(layers == 0 && self.open == 1)
                //self.group.move(-spacing, 0)

                //wait()
                while_loop(condition, delay = 0.05, (){
                    
                    -> if self.close == 1 {
                        layers += 1
                    }

                    -> if self.open == 1 {
                        layers -= 1
                    }
                    -> if self.end == 1 {

                        force_stop!
                    } else {
                        
                        self.group.move(-spacing, 0)
                        
                    }
                })
                -> 45c.set(prog_ptr_color[0], prog_ptr_color[1], prog_ptr_color[2], blending = true)
                ret!
            }
            if self.current_cell() != 0 {
                layers -= 1
                call_with_delay(0.05, move_back)
            } else {
                ret!
            }
        }
        -> if current == NOOP {
            ret!
        }


    }
}


roll_groups = 70g..170g


insert_bf_cmd = (ch: @string, offset: [@number], group: @group) {

    blockid = switch ch {
        ==">": RIGHT,//increment the data pointer (to point to the next cell to the right).
        =="<": LEFT,	//decrement the data pointer (to point to the next cell to the left).
        =="+": INCR,	//increment (increase by one) the byte at the data pointer.
        =="-": DECR,	//decrement (decrease by one) the byte at the data pointer.
        ==".": DOT,	//output the byte at the data pointer.
        ==",": INPUT,//accept one byte of input, storing its value in the byte at the data pointer.
        =="[": OPEN,
        =="]": CLOSE,
        =="end": END,
        =="no\nop": NOOP,

    }


    $.add(obj {
        OBJ_ID: 1816,
        X: offset[0],
        Y: offset[1],
        BLOCK_A: blockid,
        GROUPS: [group, gs.hidden_group],
        SCALING: 0.5,
    })
    // let scale
    // let color
    // if ch.length == 1 {
    //     scale = 0.8
    // } else {
    //     scale = 0.3
    // }
    // if blockid == NOOP {
    //     color = 2c
    // } else {
    //     color = 40c
    // }
    // $.add(obj {
    //     OBJ_ID: 914,
    //     X: offset[0] + 41 * 30 - 1200,
    //     Y: offset[1] - 8.6 * 30 - 600,
    //     TEXT: $.b64encrypt(ch),
    //     GROUPS: [group, 968g, move_group],
    //     SCALING: scale,
    //     COLOR: color,
    //     EDITOR_LAYER_1: 3,
    //     Z_LAYER: 1
    // })
}

offset = [1500, 900]
sel_off = [600, 1500]

commands = 100

selector = {block: ?b, group: ?g, start: ?g}



$.add(obj {
    OBJ_ID: 1765,
    X: sel_off[0] - 60,
    Y: sel_off[1] - 60,
    GROUPS: [selector.start, gs.hidden_group],
})

$.add(obj {
    OBJ_ID: 1816,
    X: sel_off[0] - 60,
    Y: sel_off[1] - 60,
    BLOCK_A: selector.block,
    GROUPS: [selector.group, gs.hidden_group],
    DYNAMIC_BLOCK: true,
})

is_running = counter(false)
block_input = counter(false)


reset_selector = ?b





for i in ..3 {
    $.add(obj {
        OBJ_ID: 1816,
        X: sel_off[0] + commands * 60,
        Y: sel_off[1] - 30 * i,
        BLOCK_A: reset_selector,
        GROUPS: [gs.hidden_group],
        SCALING: 0.5,
    })
}
reset_selector_func = !{
    block_input += 1
    -> 952g.move_to(953g, 0.5, x_only = true, easing = EASE_IN_OUT)
    -> selector.group.move(-10, 0, 0.09, EASE_IN_OUT)
    wait(0.1)
    prog_selector.follow(selector.group, duration = 0.15, x_mod = 0.5)
    wait(0.01)
    -> selector.group.move_to(selector.start, 0.1, easing = EASE_IN_OUT)
    prog_selector.move(-5, 0, 0.1, easing = EASE_IN_OUT)
    block_input -= 1



    activate_button(195c, 196c)

}

y_spacing = 20


// end
$.add(obj {
    OBJ_ID: 1816,
    X:  offset[0] + commands * spacing * 3,
    Y:  offset[1],
    BLOCK_A: END,
    SCALING: 0.2,
    GROUPS: [gs.hidden_group]
})

$.add(obj {
    OBJ_ID: 1816,
    X:  offset[0] - spacing * 3,
    Y:  offset[1],
    BLOCK_A: END,
    SCALING: 0.2,
    GROUPS: [gs.hidden_group]
})

//run button

// block that runs the thing
run_block = ?b
$.add(obj {
    OBJ_ID: 1816,
    X: sel_off[0] - 60,
    Y: sel_off[1],
    BLOCK_A: run_block,
    SCALING: 0.5,
    GROUPS: gs.hidden_group
})
force_quit_taps = counter(56i, bits = 3)
//force_quit_taps.display(90, 0)

reader = @bfreader::new(offset, 6)
prog_pointer.follow(reader.group)









// for i in 0..3 {
//     reader.std_out.win[i].display(60 + i * 30, 60)
// }

// for i in 0..4 {
//     reader.std_out.coin[i].display(60 + i * 30, 90)
// }

// for i in 0..4 {
//     reader.std_out.coin_coin[i].display(60 + i * 30, 120)
// }



for i in ..commands {
    sg = roll_groups[i]
    c = counter(0, bits = 4)
    //c.display(sel_off[0] + i * 60, sel_off[1] + 30)
    order = ["no\nop","+","-","<",">","[","]",".",",","end"]
    for c in ..order.length {
        off = [offset[0] + i * spacing * 3, offset[1] + c * y_spacing * 3]
        insert_bf_cmd(order[c], off, sg)
    }
    // block that increments the selector
    inc_block = ?b
    $.add(obj {
        OBJ_ID: 1816,
        X: sel_off[0] + i * 60,
        Y: sel_off[1],
        BLOCK_A: inc_block,
        SCALING: 0.5,
        GROUPS: gs.hidden_group
    })

    // block that checks for end
    end_check_block = ?b
    $.add(obj {
        OBJ_ID: 1816,
        X: sel_off[0] + i * 60 + 30,
        Y: sel_off[1] - 60,
        BLOCK_A: end_check_block,
        SCALING: 0.5,
        GROUPS: gs.hidden_group
    })

    // block that resets the selector
    reset_block = ?b
    $.add(obj {
        OBJ_ID: 1816,
        X: offset[0] + i * spacing * 3,
        Y: offset[1] - order.length * y_spacing * 3 + 10,
        BLOCK_A: reset_block,
        DYNAMIC_BLOCK: true,
        SCALING: 1,
        GROUPS: gs.hidden_group
    })

    collision(end_check_block, selector.block).on_triggered(!{c.item.if_is(EQUAL_TO, order.length - 1, reset_selector_func)})

    collision(inc_block, selector.block).on_triggered(!{
        sg.move(0, -y_spacing, 0)
        c += 1
    })

    collision(NOOP, reset_block).on_triggered(!{
        sg.move(0, y_spacing * order.length, 0)
        c -= order.length
    })

}

collision(130b, 131b).on_triggered(!{
    952g.move(-20, 0, 0.3, easing = EASE_IN_OUT)
})

collision(130b, 132b).on_triggered(!{
    952g.move(-60, 0, 0.3, easing = EASE_IN_OUT)
})


collision(130b, 166b).on_triggered(!{
    952g.move(30, 0, 0.3, easing = EASE_IN_OUT)
})



955g.toggle_off()

// bg1 = 867g
// bg2 = 868g
//bg2.toggle_off()
//-> bg2.move(-1000, 0, 0) //unload


// challenge 0: run any program
// challenge 1: output 10
// challenge 2: output 40 no input
// challenge 3: double input
// challenge 4: add 2 inputs
// challenge 5: compare 2 inputs


// challenge ideas:
// write b if input > 10, else write s
// square input
// get nth fibonachi number

// coin 7: write "coin" using no input
// coin 8: write "coin coin" using no input





reset_env = !{
    for c in reader.cells {
        -> c.reset()
    }

    -> reader.ptr.reset(for_each = (n) { cell_pointer.move(-10 * n, 0, 0.1, easing = EASE_IN_OUT) })
    -> reader.num_out.reset()
    -> reader.group.move_to(reader.start_point, 0)
    -> 952g.move_to(953g, 0.5, x_only = true, easing = EASE_IN_OUT)
    -> cell_pointer.move_to(reader.start_point, 0.3)
    -> force_quit_taps -= force_quit_taps.to_const(1..4)
    -> reader.std_out.reset()
}


start = (){

    collision(reset_selector, selector.block).on_triggered(reset_selector_func)


    touch().on_triggered(!{

        if ended == 1 {
            reset_env!

            bottom_msg_board_down()
            wait(0.2)
            activate_button(195c, null)
            activate_button(192c, null)
            954g.toggle_on() //prog selector collision enable
            955g.toggle_off()
            is_running -= 1
            block_input -= 1
            ended -= 1

        } else if is_running == 1 && reader.input != 1 {
            force_quit_taps.item.if_is(SMALLER_THAN, 3, !{
                force_quit_taps += 1
            })
            force_stop_layer.alpha(1, 0.5)
            force_stop_layer.alpha(0, 2)

        }
    })

    force_quit_taps.item.count(3).on_triggered(force_stop)



    collision(run_block, selector.block).on_triggered(!{
        is_running += 1
        block_input += 1
        954g.toggle_off() //prog selector collision disable
        955g.toggle_on()
        // reader.num_out.add(10)
        // wait(0.1)
        // reader.std_out.write(reader.num_out)
        // wait(0.1)

        activate_button(null, 195c)
        activate_button(null, 192c)
        run = !{
            wait(0.1)
            reader.group.move(10, 0, 0.05)
            //-> BG.pulse(255, 0, 0, fade_out = 1)

            while_loop(()=> reader.end == 0 && force_quit_taps < 3, delay = 0.05, (){
                reader.interpret()
            })

            if force_quit_taps < 3 && ended == 0 {
                //-> finished_color.set(255, 255, 255, 0)
                bottom_msg_board_up()
                ended += 1
            }
        }

        run!
        //call_with_delay(999, run)


    })
}
8c.set(0, 0, 0)



wait(2.5)

start()


gs.button_a().on_triggered(!{
    supress_signal(0.1)
    -> right_button.move(0, -2, 0.1, easing = EASE_OUT, easing_rate = 4)
    -> right_button.move(0, 2, 0.4, easing = EASE_IN_OUT, easing_rate = 3)
    -> right_button.pulse(0, 0, 2, fade_out = 0.5, hsv = true)



    if block_input == 0 {
        -> select_button.pulse(59, 144, 247, fade_out = 0.3)
        -> selector.group.move(0, 30, 0.05, easing = EASE_OUT, easing_rate = 10)
        -> selector.group.move(0, -30, 0.05, easing = EASE_IN, easing_rate = 10)
    }


})

gs.button_b().on_triggered(!{
    -> left_button.move(0, -2, 0.1, easing = EASE_OUT, easing_rate = 4)
    -> left_button.move(0, 2, 0.4, easing = EASE_IN_OUT, easing_rate = 3)
    -> left_button.pulse(0, 0, 2, fade_out = 0.5, hsv = true)

    supress_signal(0.1)



    if block_input == 0 {
        -> move_button.pulse(59, 144, 247, fade_out = 0.3)
        selector.group.move(20, 0, 0.1)
        prog_selector.move(10, 0, 0.1)

        //-> 905g.move(0, -150, 0)
        activate_button(196c, 195c)
    }


})

// +++.[->+++++>+++<<]>.>.[->++<]<-.>>++.+.

// +++.[->+++++>+++<<]>.>.<-.
// +++.++++++++++++.------.+++++.

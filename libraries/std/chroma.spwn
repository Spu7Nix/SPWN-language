#[no_std, cache_output]

#[desc("Represents a color value, used in for example color triggers and pulse triggers.")]
type @chroma

import "array.spwn"
import "number.spwn"

rgb_to_hsv = (r: @number, g: @number, b: @number) {
    max = [r, g, b].max()
    min = [r, g, b].min()
    return [
        () {
            if r == g && g == b { return 0 }
            let [r, g, b] = [r, g, b]
            [r, g, b] = [r, g, b].map(x => x.map(0, max, 0, 255))
            min2 = [r, g, b].min()
            [r, g, b] = [r, g, b].map(x => x.map(min2, 255, 0, 255))
            if r == 255 {
                return $.floor(g.map(0,255,0,60) if g > 0 else b.map(0,255,360,300))
            } else if g == 255 {
                return $.floor(r.map(0,255,120,60) if r > 0 else b.map(0,255,120,180))
            } else {
                return $.floor(r.map(0,255,240,300) if r > 0 else g.map(0,255,240,180))
            }
        } (),
        $.floor(min.map(max, 0, 0, 100)) if min != max else 0,
        $.floor(max.map(0, 255, 0, 100))
    ]
}

hsv_to_rgb = (h: @number, s: @number, v: @number) {
    return match h {
        <=60: [255, h.map(0,60,0,255), 0],
        <=120: [h.map(60,120,255,0), 255, 0],
        <=180: [0, 255, h.map(120,180,0,255)],
        <=240: [0, h.map(180,240,255,0), 255],
        <=300: [h.map(240,300,0,255), 0, 255],
        <=360: [255, 0, h.map(300,360,255,0)],
    }.map(x => s.map(100, 0, x, 255)).map(x => v.map(100, 0, x, 0)).map(x => $.floor(x))
}

value_hex = @array('0123456789abcdef')

hex_value = (c: @string) {
    output = value_hex.index(c.lowercase())
    if output == null { throw "Invalid character `{}` in hex code".fmt(c) }
    return output
}

hex_to_rgb = (s: @string) {
    let s = s.substr(1,s.length) if s[0] == '#' else s
    return match s.length {
        ==6: [
            hex_value(s[0])*16 + hex_value(s[1]),
            hex_value(s[2])*16 + hex_value(s[3]),
            hex_value(s[4])*16 + hex_value(s[5]),
            255,
        ],
        ==8: [
            hex_value(s[0])*16 + hex_value(s[1]),
            hex_value(s[2])*16 + hex_value(s[3]),
            hex_value(s[4])*16 + hex_value(s[5]),
            hex_value(s[6])*16 + hex_value(s[7]),
        ],
        ==3: [
            hex_value(s[0])*17,
            hex_value(s[1])*17,
            hex_value(s[2])*17,
            255,
        ],
        ==4: [
            hex_value(s[0])*17,
            hex_value(s[1])*17,
            hex_value(s[2])*17,
            hex_value(s[3])*17,
        ],
        else: () {
            throw "Invalid hex code length"
        } ()
    }
}

rgb_to_hex = (r: @number, g: @number, b: @number, a: @number) {
    return (
        value_hex[r/%16] +
        value_hex[r%16] +
        value_hex[g/%16] +
        value_hex[g%16] +
        value_hex[b/%16] +
        value_hex[b%16] +
        value_hex[a/%16] +
        value_hex[a%16]
    )
}

type @blend_mode

blend_mode = (func: (@number, @number) -> @number) {
    return @blend_mode::{func: (b, o) => func(b, o).clamp(0,1)}
}

BLEND_MODES = {
    normal: blend_mode((b, o) => o),
    multiply: blend_mode((b, o) => b*o),
    add: blend_mode((b, o) => b+o),
    color_burn: blend_mode((b, o) => 1 - (1 - b) / o),
    linear_burn: blend_mode((b, o) => b + o - 1),
    color_dodge: blend_mode((b, o) => o / (1 - b)),
    //reflect: blend_mode((b, o) => null),
    //glow: blend_mode((b, o) => null),
    overlay: blend_mode((b, o) => b * (b + 2*o * (1 - b))),
    difference: blend_mode((b, o) => $.abs(o - b)),
    subtract: blend_mode((b, o) => o - b),
    //negate: blend_mode((b, o) => null),
    lighten: blend_mode((b, o) => $.max(b, o)),
    darken: blend_mode((b, o) => $.min(b, o)),
    screen: blend_mode((b, o) => 1 - (1 - o) * (1 - b)),
    //xor: blend_mode((b, o) => null),
}

curve = (a1, a2) {
    a = a1 + a2*(1 - a1)
    return [a1 / a, a]
}

// 0-1 values, color 1 is the overlay
blend_rgb = (r1, g1, b1, a1, r2, g2, b2, a2, mode) {
    if a1 == 0 {
        return [r2, g2, b2, a2]
    }
    if a2 == 0 {
        return [r1, g1, b1, a1]
    }
    let op_col = [
        mode.func(r2, r1) * a1 + r2 * (1 - a1),
        mode.func(g2, g1) * a1 + g2 * (1 - a1),
        mode.func(b2, b1) * a1 + b2 * (1 - a1),
    ]
    [t, a] = curve(a1, a2)
    if a2 == 1 {
        return op_col + [a]
    }
    op_col = [
        t.map(a1, 1, op_col[0], r1),
        t.map(a1, 1, op_col[1], g1),
        t.map(a1, 1, op_col[2], b1),
    ]
    return op_col + [a]
}


impl @chroma {

    from_rgb: #[
        desc('Creatss a new chroma from rgb values (0-1)'),
        example(u"
            orange = @chroma::from_rgb(1, 0.5, 0)
        ")
    ] (r: @number, g: @number, b: @number, a: @number = 1) -> @chroma {
        if ! ( [r, g, b, a] is [>=0 & <=1] ) {
            throw "RGB values must be between 0 and 1"
        }
        [_r, _g, _b, _a] = [r, g, b, a]
        [_r8, _g8, _b8, _a8] = [r, g, b, a].map(x => $.floor(x * 255))
        [_h360, _s100, _v100] = rgb_to_hsv(_r8, _g8, _b8)
        [_h, _s, _v] = [_h360 / 360, _s100 / 100, _v100 / 100]
        return @chroma::{
            _r, _g, _b, _a,
            _r8, _g8, _b8, _a8,
            _h, _s, _v,
            _h360, _s100, _v100, _a100: _a * 100,
            _declare_type: "rgb"
        }
    },

    from_rgb8: #[
        desc('Creatss a new chroma from 8-bit rgb values (0-255)'),
        example(u"
            cyan = @chroma::from_rgb8(0, 255, 255)
        ")
    ] (r: @number, g: @number, b: @number, a: @number = 255) -> @chroma {
        if ! ( [r, g, b, a] is [>=0 & <=255] ) {
            throw "8-bit RGB values must be between 0 and 1"
        }
        [_r8, _g8, _b8, _a8] = [r, g, b, a].map(x => $.floor(x))
        [_r, _g, _b, _a] = [r, g, b, a].map(x => x / 255)
        [_h360, _s100, _v100] = rgb_to_hsv(_r8, _g8, _b8)
        [_h, _s, _v] = [_h360 / 360, _s100 / 100, _v100 / 100]
        return @chroma::{
            _r, _g, _b, _a,
            _r8, _g8, _b8, _a8,
            _h, _s, _v,
            _h360, _s100, _v100, _a100: _a * 100,
            _declare_type: "rgb8"
        }
    },

    from_hsv: #[
        desc('Creatss a new chroma from hsv values (0-1)'),
        example(u"
            blue = @chroma::from_hsv(2/3, 1, 1)
        ")
    ] (h: @number, s: @number, v: @number, a: @number = 1) -> @chroma {
        if ! ( [h, s, v, a] is [>=0 & <=1] ) {
            throw "HSV values must be between 0 and 1"
        }
        [_h, _s, _v, _a] = [h, s, v, a]
        [_h360, _s100, _v100, _a100] = [h * 360, s * 100, v * 100, a * 100]
        [_r8, _g8, _b8] = hsv_to_rgb(_h360, _s100, _v100)
        [_r, _g, _b] = [_r8 / 255, _g8 / 255, _b8 / 255]
        return @chroma::{
            _r, _g, _b, _a,
            _r8, _g8, _b8, _a8: a * 255,
            _h, _s, _v,
            _h360, _s100, _v100, _a100,
            _declare_type: "hsv"
        }
    },

    from_hsv2: #[
        desc('Creatss a new chroma from hsv values (0-360, 0-100, 0-100)'),
        example(u"
            yellow = @chroma::from_hsv2(60, 100, 100)
        ")
    ] (h: @number, s: @number, v: @number, a: @number = 100) -> @chroma {
        if ! ( h is >=0 & <=360 ) {
            throw "Hue value must be between 0 and 360"
        }
        if ! ( [s, v, a] is [>=0 & <=100] ) {
            throw "Saturation, brightness and alpha values must be between 0 and 100"
        }
        [_h360, _s100, _v100, _a100] = [h, s, v, a]
        [_h, _s, _v, _a] = [h / 360, s / 100, v / 100, a / 100]
        [_r8, _g8, _b8] = hsv_to_rgb(_h360, _s100, _v100)
        [_r, _g, _b] = [_r8 / 255, _g8 / 255, _b8 / 255]
        return @chroma::{
            _r, _g, _b, _a,
            _r8, _g8, _b8, _a8: a.map(0,100,0,255),
            _h, _s, _v,
            _h360, _s100, _v100, _a100,
            _declare_type: "hsv2"
        }
    },

    from_hex: #[
        desc('Creatss a new chroma from a hex string'),
        example(u"
            white = @chroma::from_hex('ffffff')
            black = @chroma::from_hex('#000000')
            semitransparent_gray = @chroma::from_hex('7f7f7fee')
        ")
    ] (s: @string) -> @chroma {
        [_r8, _g8, _b8, _a8] = hex_to_rgb(s)
        [_r, _g, _b, _a] = [_r8, _g8, _b8, _a8].map(x => x / 255)
        [_h360, _s100, _v100] = rgb_to_hsv(_r8, _g8, _b8)
        [_h, _s, _v] = [_h360 / 360, _s100 / 100, _v100 / 100]
        return @chroma::{
            _r, _g, _b, _a,
            _r8, _g8, _b8, _a8,
            _h, _s, _v,
            _h360, _s100, _v100, _a100: _a * 100,
            _declare_type: "hex"
        }
    },

    _display_: (self) -> @string {
        return match self._declare_type {
            =="rgb": "rgb({}, {}, {}, {})".fmt([self._r, self._g, self._b, self._a]),
            =="rgb8": "rgb8({}, {}, {}, {})".fmt([self._r8, self._g8, self._b8, self._a8]),
            =="hsv": "hsv({}, {}, {}, {})".fmt([self._h, self._s, self._v, self._a]),
            =="hsv2": "hsv2({}, {}, {}, {})".fmt([self._h360, self._s100, self._v100, self._a100]),
            =="hex": "hex('#{}')".fmt([rgb_to_hex(self._r8, self._g8, self._b8, self._a8)]),
        }
    },

    r: #[
        desc("Gets or sets a chroma's red value"),
        example(u"
            let a = rgb(1,1,1,0.5)
            $.print(a.r()) // gets the value
            a.r(0.5) // sets the value
        ")
    ] (self, v: @number = null) -> @number {
        if v == null { return self._r }
        self = @chroma::from_rgb(v, self._g, self._b, self._a)
    },
    g: (self, v: @number = null) -> @number {
        if v == null { return self._g }
        self = @chroma::from_rgb(self._r, v, self._b, self._a)
    },
    b: (self, v: @number = null) -> @number {
        if v == null { return self._b }
        self = @chroma::from_rgb(self._r, self._g, v, self._a)
    },
    a: (self, v: @number = null) -> @number {
        if v == null { return self._a }
        self = @chroma::from_rgb(self._r, self._g, self._b, v)
    },
    
    r8: #[
        desc("Gets or sets a chroma's 8-bit red value"),
        example(u"
            let a = rgb(1,1,1)
            $.print(a.r8()) // gets the value
            a.r8(127) // sets the value
        ")
    ] (self, v: @number = null) -> @number {
        if v == null { return self._r8 }
        self = @chroma::from_rgb8(v, self._g8, self._b8, self._a8)
    },
    g8: (self, v: @number = null) -> @number {
        if v == null { return self._g8 }
        self = @chroma::from_rgb8(self._r8, v, self._b8, self._a8)
    },
    b8: (self, v: @number = null) -> @number {
        if v == null { return self._b8 }
        self = @chroma::from_rgb8(self._r8, self._g8, v, self._a8)
    },
    a8: (self, v: @number = null) -> @number {
        if v == null { return self._a8 }
        self = @chroma::from_rgb8(self._r8, self._g8, self._b8, v)
    },
    
    h: #[
        desc("Gets or sets a chroma's hue value"),
        example(u"
            let a = rgb(1,1,1)
            $.print(a.h()) // gets the value
            a.h(1/3) // sets the value
        ")
    ] (self, v: @number = null) -> @number {
        if v == null { return self._h }
        self = @chroma::from_hsv(v, self._s, self._v, self._a)
    },
    s: (self, v: @number = null) -> @number {
        if v == null { return self._s }
        self = @chroma::from_hsv(self._h, v, self._v, self._a)
    },
    v: (self, v: @number = null) -> @number {
        if v == null { return self._v }
        self = @chroma::from_hsv(self._h, self._s, v, self._a)
    },
    
    h360: (self, v: @number = null) -> @number {
        if v == null { return self._h360 }
        self = @chroma::from_hsv2(v, self._s100, self._v100, self._a100)
    },
    s100: (self, v: @number = null) -> @number {
        if v == null { return self._s100 }
        self = @chroma::from_hsv2(self._h360, v, self._v100, self._a100)
    },
    v100: (self, v: @number = null) -> @number {
        if v == null { return self._v100 }
        self = @chroma::from_hsv2(self._h360, self._s100, v, self._a100)
    },
    a100: (self, v: @number = null) -> @number {
        if v == null { return self._a100 }
        self = @chroma::from_hsv2(self._h360, self._s100, self._v100, v)
    },

    rgb: #[desc("Returns an array of the chroma's RGB values")] 
    (self) -> [@number] {
        return [self._r, self._g, self._b]
    },
    rgba: #[desc("Returns an array of the chroma's RGBA values")] 
    (self) -> [@number] {
        [self._r, self._g, self._b, self._a]
    },

    rgb8: #[desc("Returns an array of the chroma's 8-bit RGB values")] 
    (self) -> [@number] {
        return [self._r8, self._g8, self._b8]
    },
    rgba8: #[desc("Returns an array of the chroma's 8-bit RGBA values")] 
    (self) -> [@number] {
        return [self._r8, self._g8, self._b8, self._a8]
    },
    
    hsv: #[desc("Returns an array of the chroma's HSV values")] 
    (self) -> [@number] {
        return [self._h, self._s, self._v]
    },
    hsva: #[desc("Returns an array of the chroma's HSVA values")] 
    (self) -> [@number] {
        return [self._h, self._s, self._v, self._a]
    },

    hsv2: (self) -> [@number] {
        return [self._h360, self._s100, self._v100]
    },
    hsva2: (self) -> [@number] {
        return [self._h360, self._s100, self._v100, self._a100]
    },

    hex: #[desc("Returns a string of the chroma's hex code")] 
    (self) -> @string {
        return rgb_to_hex(self._r8, self._g8, self._b8, self._a8)
    },

    over: #[
        desc('Blends this chroma with another chroma as if layered above it'),
        example(u"
            a = rgb(1,0.5,1)
            b = rgb(0,0.5,1)

            c = a.over(b, blend_modes.multiply)

            $.assert(c.rgb() == [0, 0.25, 1])
        ")
    ] (self, o: @chroma, mode: @blend_mode = BLEND_MODES.normal) -> @chroma {
        [r, g, b, a] = blend_rgb(
            self._r,
            self._g,
            self._b,
            self._a,
            o._r,
            o._g,
            o._b,
            o._a,
            mode
        )
        return @chroma::from_rgb(r, g, b, a)
    },

    under: #[
        desc('Blends this chroma with another chroma as if layered under it'),
        example(u"
            a = rgb(1,0.5,1)
            b = rgb(0,0.5,1)

            c = a.under(b, blend_modes.normal)

            $.assert(c.rgb() == [0, 0.5, 1])
        ")
    ] (self, o: @chroma, mode: @blend_mode = BLEND_MODES.normal) -> @chroma {
        [r, g, b, a] = blend_rgb(
            o._r,
            o._g,
            o._b,
            o._a,
            self._r,
            self._g,
            self._b,
            self._a,
            mode
        )
        return @chroma::from_rgb(r, g, b, a)
    },

}

import "chroma/colors.spwn"

return {
    BLEND_MODES,
}

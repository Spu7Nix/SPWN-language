#[no_std, cache_output]

type @vector


impl @vector {
    new: #[constructor] ( dims: [@number] ) {
        if dims.length < 1 {
            throw "Cannot create a vector with less than 1 dimension"
        }
        return switch dims.length {
            ==2: @vector::{ dims, x: dims[0], y: dims[1] },
            ==3: @vector::{ dims, x: dims[0], y: dims[1], z: dims[2] },
            ==4: @vector::{ dims, x: dims[0], y: dims[1], z: dims[2], w: dims[3] },
            else: @vector::{ dims },
        }
    },
    new2: #[constructor] ( x: @number, y: @number ) {
        return @vector::{ dims: [x,y], x, y }
    },
    new3: #[constructor] ( x: @number, y: @number, z: @number ) {
        return @vector::{ dims: [x,y,z], x, y, z }
    },

    assert_dims: #[desc("Asserts if the vectors have the same number of dimensions")] (self, other: @vector) {
        if self.dims.length != other.dims.length {
            throw "Vectors must have the same amount of dimensions"
        }
    },

    _display_: (self) {
        return '(' + ", ".join(self.dims) + ')'
    },

    _plus_: (self, other: @vector) {
        self.assert_dims(other)
        return @vector::new( self.dims.map_index((el,i) => el + other.dims[i]) )
    },
    _add_: (self, other: @vector) {
        self.assert_dims(other)
        self.dims.map_index((el,i) => el + other.dims[i], true)
    },
    _minus_: (self, other: @vector) {
        self.assert_dims(other)
        return @vector::new( self.dims.map_index((el,i) => el - other.dims[i]) )
    },
    _subtract_: (self, other: @vector) {
        self.assert_dims(other)
        self.dims.map_index((el,i) => el - other.dims[i], true)
    },
    _times_: (self, other: @vector | @number) {
        if other.type == @vector {
            self.assert_dims(other)
        }
        return switch other {
            @vector: @vector::new( self.dims.map_index((el,i) => el * other.dims[i])),
            @number: @vector::new( self.dims.map(el => el * other)),
        }
    },
    _multiply_: (self, other: @vector | @number) {
        if other.type == @vector {
            self.assert_dims(other)
        }
        switch other {
            @vector: self.dims.map_index((el,i) => el * other.dims[i], true),
            @number: self.dims.map(el => el * other, true),
        }
    },
    _divided_by_: (self, other: @vector | @number) {
        if other.type == @vector {
            self.assert_dims(other)
        }
        return switch other {
            @vector: @vector::new( self.dims.map_index((el,i) => el / other.dims[i]))
            @number: @vector::new( self.dims.map(el => el / other))
        }
    },
    _divide_: (self, other: @vector | @number) {
        if other.type == @vector {
            self.assert_dims(other)
        }
        switch other {
            @vector: self.dims.map_index((el,i) => el / other.dims[i], true)
            @number: self.dims.map(el => el / other, true)
        }
    },
    _mod_: (self, other: @vector | @number) {
        if other.type == @vector {
            self.assert_dims(other)
        }
        return switch other {
            @vector: @vector::new( self.dims.map_index((el,i) => el % other.dims[i]))
            @number: @vector::new( self.dims.map(el => el % other))
        }
    },
    _modulate_: (self, other: @vector | @number) {
        if other.type == @vector {
            self.assert_dims(other)
        }
        switch other {
            @vector: self.dims.map_index((el,i) => el % other.dims[i], true)
            @number: self.dims.map(el => el % other, true)
        }
    },
    _pow_: (self, other: @vector | @number) {
        if other.type == @vector {
            self.assert_dims(other)
        }
        return switch other {
            @vector: @vector::new( self.dims.map_index((el,i) => el ^ other.dims[i]))
            @number: @vector::new( self.dims.map(el => el ^ other))
        }
    },
    _exponate_: (self, other: @vector | @number) {
        if other.type == @vector {
            self.assert_dims(other)
        }
        switch other {
            @vector: self.dims.map_index((el,i) => el ^ other.dims[i], true)
            @number: self.dims.map(el => el ^ other, true)
        }
    },
    _intdivide_: (self, other: @vector | @number) {
        if other.type == @vector {
            self.assert_dims(other)
        }
        return switch other {
            @vector: @vector::new( self.dims.map_index((el,i) => el /% other.dims[i]))
            @number: @vector::new( self.dims.map(el => el /% other))
        }
    },
    _intdivided_by_: (self, other: @vector | @number) {
        if other.type == @vector {
            self.assert_dims(other)
        }
        switch other {
            @vector: self.dims.map_index((el,i) => el /% other.dims[i], true)
            @number: self.dims.map(el => el /% other, true)
        }
    },

    _equal_: (self, other: @vector) {
        self.assert_dims(other)
        for i in 0..self.dims.length {
            if self.dims[i] != other.dims[i] { return false; }
        }
        return true
    },
    _not_equal_: (self, other: @vector) {
        self.assert_dims(other)
        return !(self == other)
    },

    abs: (self) {
        return @vector::new( self.dims.map(el => $.abs(el) ) )
    },

    dot: (self, other: @vector) {
        self.assert_dims(other)
        let result = 0
        for i in 0..self.dims.length {
            result += self.dims[i] * other.dims[i]
        }
        return result
    },
    cross: (self, other: @vector) {
        self.assert_dims(other)
        if self.dims.length == 2 {
            return self.dims[0] * other.dims[1] - self.dims[1] * other.dims[0]
        } else if self.dims.length == 3 {
            return @vector::new([
                self.dims[1]*other.dims[2] - self.dims[2]*other.dims[1],
                self.dims[2]*other.dims[0] - self.dims[0]*other.dims[2],
                self.dims[0]*other.dims[1] - self.dims[1]*other.dims[0],
            ])
        } else {
            throw "Cross product is only implemented for 2 and 3 dimensional vectors"
        }
    },

    length: (self) {
        return $.sqrt(self.length_sq())
    },
    length_sq: (self) {
        let result = 0
        for i in self.dims {
            result += i*i
        }
        return result
    },

    normalized: (self) {
        len = self.length()
        return @vector::new( self.dims.map(el => el / len) )
    },
    floor: (self) {
        return @vector::new( self.dims.map(el => $.floor(el)) )
    },
    ceil: (self) {
        return @vector::new( self.dims.map(el => $.ceil(el)) )
    },
    round: (self) {
        return @vector::new( self.dims.map(el => $.round(el)) )
    },

    inverse: (self) {
        return @vector::new( self.dims.map(el => 1 / el) )
    },
    sign: (self) {

        return @vector::new( self.dims.map((el) {
            if el > 0 {
                return 1
            } else if el == 0 {
                return 0
            }
            return -1
        }) )

    },

    map: (self, cb: @macro) {
        return @vector::new( self.dims.map(cb) )
    },

    angle_to: (self, other: @vector) {
        self.assert_dims(other)
        return $.acos( self.dot(other) / self.length() / other.length() )
    },
    bounce: (self, other: @vector) {
        self.assert_dims(other)
        normal = other.normalized()
        coef = self.dot(normal)
        refl = self + (normal * coef - self) * 2
        return refl * -1
    },
    direction_to: (self, other: @vector) {
        self.assert_dims(other)
        return (other - self).normalized()
    },
    distance_to: (self, other: @vector) {
        self.assert_dims(other)
        return (other - self).length()
    },
    distance_sq_to: (self, other: @vector) {
        self.assert_dims(other)
        return (other - self).length_sq()
    },
    is_normalized: (self) {
        return $.abs(self.length_sq() - 1) < 0.00000000000001
    },
    lerp: (self, other: @vector, t: @number) {
        self.assert_dims(other)
        return self + (other - self) * t
    },
    max_dim: (self) {
        let max = self.dims[0]
        let max_i = 0
        for i in 0..self.dims.length {
            if self.dims[i] > max {
                max = self.dims[i]
                max_i = i
            }
        }
        return max_i
    },
    min_dim: (self) {
        let min = self.dims[0]
        let min_i = 0
        for i in 0..self.dims.length {
            if self.dims[i] < min {
                min = self.dims[i]
                min_i = i
            }
        }
        return min_i
    },
    move_toward: (self, other: @vector, amount: @number) {
        self.assert_dims(other)
        return self + self.direction_to(other) * amount
    },
    project: (self, other: @vector) {
        self.assert_dims(other)
        normal = other.normalized()
        return normal * self.dot(normal)
    },
    reflect: (self, other: @vector) {
        self.assert_dims(other)
        normal = other.normalized()
        coef = self.dot(normal)
        refl = self + (normal * coef - self) * 2
        return refl
    },
    rotated: (self, axis: @vector, angle: @number) {
        self.assert_dims(other)
        if self.dims.length == 3 {
            return self*$.cos(angle) + axis.cross(self)*$.sin(angle) + axis*axis.dot(self)*(1-$.cos(angle))
        } else {
            throw "Rotating a vector around another works only for 3D vectors"
        }
    },
    rotated_2d: (self, angle: @number) {
        if self.dims.length == 2 {
            return @vector::new([
                self.x * $.cos(angle) - self.y * $.sin(angle),
                self.x * $.sin(angle) + self.y * $.cos(angle),
            ])
        } else {
            throw "Rotating a vector in 2D works only for 2D vectors ðŸ˜³"
        } 
    },
    slerp: (self, other: @vector, t: @number) {
        self.assert_dims(other)
        angle = self.angle_to(other)
        return self*($.sin(angle*(1-t))/$.sin(angle)) + other*($.sin(t*angle)/$.sin(angle))
    },
    slide: (self, other: @vector) {
        self.assert_dims(other)
        return self - self.project(other)
    },
}



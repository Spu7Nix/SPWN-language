#[no_std, cache_output]
import "array.spwn"

impl @dictionary {
	is_empty: #[desc("Returns true if there are no entries in the dictionary, false otherwise."), example(u"
		dict = {}
		$.assert(dict.is_empty())
	")]
	(self) -> @bool {
		// no way to get number of entries currently afaik
		// so this 'loop' will get skipped over if empty,
		// or otherwise early exit on the first entry if not
		for kv in self {
			return false;
		}
		return true;
	},
	keys: #[desc("Gets the dictionary's keys."), example(u"
		wares = {
			apple: 10,
			gold: 1000,
			peanuts: 5,
		}
		$.assert('apple' in wares.keys())
	")]
	(self) -> [@string] {
		let ret = []
		for kv in self {
			ret.push(kv[0])
		}
		return ret
	},
	values: #[desc("Gets the dictionary's values."), example(u"
		wares = {
			apple: 10,
			gold: 1000,
			peanuts: 5,
		}
		$.assert(wares.values().sort() == [5, 10, 1000])
	")]
	(self) -> [_] {
		let ret = []
		for kv in self {
			ret.push(kv[1])
		}
		return ret
	},
	items: #[desc("Gets the dictionary's items."), example(u"
		wares = {
			apple: 10,
			gold: 1000,
			peanuts: 5,
		}
		$.assert(['apple', 10] in wares.items())
	")]
	(self) -> [@array] {
		let ret = []
		for kv in self {
			ret.push(kv)
		}
		return ret
	},
	set: #[desc("Sets an item in the dictionary."), example(u"
		let wares = {
			apple: 10,
			gold: 1000,
		}
		wares.set('peanuts', 5)
		$.assert(wares.peanuts == 5)
	")]
	(self, key: @string, val) -> @NULL {
		if key in self {
			self[key] = val
		} else {
			let self[key] = val
		}
	},
	get: #[desc("Gets an item from the dictionary."), example(u"
		let wares = {
			apple: 10,
			gold: 1000,
			peanuts: 5,
		}

		$.assert(wares.get('peanuts') == 5)
		$.assert(wares.get('silver', default = 42) == 42)
	")]
	(self, key: @string, default = @NULL::{}) -> _ {
		if key in self {
			return self[key]
		} else {
			if default == @NULL::{} {
				throw "Key doesn't exist and no fallback was provided"
			} else {
				return default
			}
		}
	},
	delete: #[desc("Deletes an item from the dictionary."), example(u"
		let wares = {
			apple: 10,
			gold: 1000,
			peanuts: 5,
		}
		wares.delete('peanuts')

		$.assert('peanuts' in wares == false)
	")] (self, key: @string) -> @NULL {
		if key in self { $.remove_index(self, key) }
	},
	clear: #[desc("Clears the dictionary."), example(u"
		let wares = {
			apple: 10,
			gold: 1000,
			peanuts: 5,
		}
		wares.clear()

		$.assert(wares.is_empty())
	")]
	(self) -> @NULL {
		self = {}
	},
	contains_value: #[desc("Checks if the dictionary contains a value."), example(u"
		let wares = {
			apple: 10,
			gold: 1000,
			peanuts: 5,
		}

		$.assert(wares.contains_value(5))
	")]
	(self, value) -> @bool {
		return self.values().contains(value)
	},
	map: #[desc("Calls a defined callback function on each key-value pair of a dictionary, and returns an array that contains the results."), example(u"
		dict = {key1: 0, key2: 1, key3: 2}
		$.assert('k' in dict.map((k, v) => k[v]))
	")]
	(self, cb: (_, _) -> _) -> @array {
		let output = [];
		for iter in self {
			output.push(cb(iter[0], iter[1]));
		}
		return output;
	},
}

#[no_std, cache_output]

let constants = import "constants.spwn"

MATCHER = @pattern | (_ -> @bool)
matches = (v, p: MATCHER) -> @bool => match p {
    @pattern: v is p,
    @macro: p(v)
}

return {
	objects: $.level_objects(),

	get_objects: #[desc("Returns an array of all the objects in the level with a property whose value matches the pattern or macro"), example(u"
		objects_over_x_50 = level.get_objects(obj_props.X, >50)
		objects_with_group_2 = level.get_objects(obj_props.GROUPS, g => 2g in g)
    ", run_test = false)] (
        prop: @object_key,
        pat: MATCHER,
    ) -> [@object] {
		return $.level_objects().filter(o => prop in o && matches(o[prop], pat))
    },

	get_marker: #[desc("Returns the first text object found with the given text, or null if none are found"), example(u'
		extract obj_props

		thing_marker = level.get_marker("thing marker")
		$.add( move_trigger(1g,10,0).with(X, thing_marker[X] ) )
	', run_test = false)] (
		text: @string,
	) -> @object | @NULL {
		for i in $.level_objects() {
			if constants.obj_props.TEXT in i && i[constants.obj_props.TEXT] == $.b64encode(text) {
				return i
			}
		}
		return null
	},
	
}

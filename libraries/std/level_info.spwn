#[no_std, cache_output]

let constants = import "constants.spwn"
let level_objects = []


if $.level_string() != "" {

	let objects_arr = (s => (s.substr(s.index(';') + 1, s.length)))( $.level_string() ).split(';')[:-1]
	objects_arr = objects_arr.filter(x => x != '')
	objects_arr = objects_arr.map(x => x.split(','))
	objects_arr = objects_arr.map(x => [*[x[:2:], x[1:2:]]])
	
	
	BOOL_PROPS = [4, 5, 11, 13, 15, 16, 17, 34, 41, 42, 48, 56, 58, 59, 60, 62, 64, 65, 66, 67, 70, 81, 86, 87, 89, 93, 94, 96, 98, 104, 100, 102, 103, 106, 36]
	COLOR_PROPS = [21, 22, 23, 50]
	STRING_PROPS = [31, 43, 44, 49]
	GROUP_PROPS = [71]
	BLOCK_PROPS = [95]
	
	
	TARGETING_GROUP = [901, 1346, 1585, 1611, 1007, 1049, 1347, 1268, 1616, 1595, 1811, 1812, 1814, 1815, 1817]
	TARGETING_COLOR = [899]
	
	for o in objects_arr {
		if o[0][1] == "31" { continue; }
		let new_obj = obj {}
		let obj_id = 0
		for [prop, value] in o {
			$.edit_obj(
				new_obj,
				@number(prop),
				switch @number(prop) {
					==1: () {
						obj_id = @number(value)
						return @number(value)
					} (),
					in BOOL_PROPS: @bool(@number(value)),
					in COLOR_PROPS: @color(@number(value)),
					in STRING_PROPS: value,
					in GROUP_PROPS: @group(@number(value)),
					in BLOCK_PROPS: @block(@number(value)),
					==57: value.split('.').map(x => @group(@number(x)) ),
					==80: switch obj_id {
						==1815: @block(@number(value)),
						_: @item(@number(value))
					},
					==51: switch obj_id {
						in TARGETING_GROUP: @group(@number(value)),
						in TARGETING_COLOR: @color(@number(value)),
						==1006: () {
							for [_prop, _value] in o {
								if @number(_prop) == 52 {
									return (@group if _value == 1 else @color)( @number(value) )
								}
								return @color(@number(value))
							}
						} ()
					}
					_: @number(value)
				}
			)
		}
		level_objects.push(new_obj)
	}

}

MATCHER = @pattern | (_ -> @bool)
matches = (v, p: MATCHER) -> @bool => switch p {
    @pattern: v is p,
    @macro: p(v)
}

return {
	objects: level_objects,
	get_objects: #[desc("Returns an array of all the objects in the level with a property whose value matches the pattern or macro")
	example("
objects_over_x_50 = get_objects(obj_props.X, >50)
objects_with_group_2 = get_objects(obj_props.GROUPS, g => 2g in g)
    ")] (
        prop: @object_key,
        match: MATCHER,
    ) -> [@object] {
		return level_objects.filter(o => prop in o && matches(o[prop], match))
    },
	get_marker: #[desc("Returns the first text object found with the given text, or null if none are found")
	example('
extract obj_props

thing_marker = get_marker("thing marker")
$.add( move_trigger(1g,10,0).with(X, thing_marker[X] ) )
	')] (
		text: @string,
	) -> @object | @NULL {
		for i in level_objects {
			if constants.obj_props.TEXT in i && i[constants.obj_props.TEXT] == $.b64encode(text) {
				return i
			}
		}
		return null
	},
}

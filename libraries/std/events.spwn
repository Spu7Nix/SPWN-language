#[no_std, cache_output]
constants = import "constants.spwn"

extract constants.obj_props

type @event

impl @event {
    on: #[desc("Triggers a function every time an event fires") example("
on(touch(), !{
    10g.move(10, 0)
})

// you can also use it as a decorator
[[ on(touch()) ]] !{
    10g.move(10, 0)
}
    ")] (
        #[desc("Event to trigger on")] event: @event,
        #[desc("Function to trigger")] function: @trigger_function
    ) -> @NULL {
        event.on_triggered(function)
    },
    
}

return {

    touch: #[desc("Implementation of the touch trigger (returns an event)") example("
[[handle(touch())]] !{
    10g.move(10, 0)
}
    ")] (
        #[desc("Dual mode (only check for touch on the dual side)")] dual_side: @bool = false
    ) -> @event {
        return @event::{
            on_triggered: (function) => $.add( trigger{
                OBJ_ID: 1595,
                HOLD_MODE: true,
                TOGGLE_MODE: 1,
                TARGET: function,
                DUAL_MODE: dual_side,

            })
        }

    },

    touch_end: #[desc("Returns an event for when a touch ends") example("
[[handle(touch_end())]] !{
    10g.move(10, 0)
}
    ")] (
        #[desc("Dual mode (only check for touch on the dual side)")] dual_side: @bool = false
    ) -> @event {
        return @event::{
            on_triggered: (function) => $.add( trigger{
                OBJ_ID: 1595,
                HOLD_MODE: true,
                TOGGLE_MODE: 2,
                TARGET: function,
                DUAL_MODE: dual_side,

            })
        }

    },

    collision: #[desc("Implementation of the collision trigger (returns an event)") example("
[[handle(collision(1b, 2b))]] !{
    BG.set(rgb(0, 0, 0))
}
    ")] (
        #[desc("Block A ID")] a: @block,
        #[desc("Block B ID")] b: @block
    ) -> @event {
        return @event::{
            on_triggered: (function) => $.add( trigger{
                OBJ_ID: 1815,
                BLOCK_A: a,
                BLOCK_B: b,
                ACTIVATE_GROUP: true,
                ACTIVATE_ON_EXIT: false,
                TARGET: function,

            })
        }

    },

    collision_exit: #[desc("Returns an event for when a collision exits") example("
[[handle(collision_exit(1b, 2b))]] !{
    BG.set(rgb(0, 0, 0))
}
    ")] (
        #[desc("Block A ID")] a: @block,
        #[desc("Block B ID")] b: @block
    ) -> @event {
        return @event::{
            on_triggered: (function) => $.add( trigger{
                OBJ_ID: 1815,
                BLOCK_A: a,
                BLOCK_B: b,
                ACTIVATE_GROUP: true,
                ACTIVATE_ON_EXIT: true,
                TARGET: function,

            })
        }
    },


    death: #[desc("Returns an event for when the player dies") example("
[[handle(death())]] !{
    BG.set(rgb(0, 0, 0))
}
    ")] () -> @event {
        return @event::{
            on_triggered: (function) => $.add( trigger{
                OBJ_ID: 1812,
                ACTIVATE_GROUP: true,
                TARGET: function
            })
        }
    },

    count: #[desc("Implementation of a count trigger (returns an event)") example("
[[handle(count(4i, 3))]] !{
    BG.set(rgb(0, 0, 0))
}
    ")] (it: @item, hits: @number, multi: @bool = true) -> @event {
        return @event::{
            on_triggered: (function) => $.add(trigger {
                OBJ_ID: 1611,
                ACTIVATE_GROUP: true,
                TARGET: function,
                ITEM: it,
                COUNT: hits,
                COUNT_MULTI_ACTIVATE: multi
            })
        }
    }
}

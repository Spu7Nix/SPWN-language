#[no_std, cache_output]
constants = import "constants.spwn"

extract constants.obj_props

type @event

impl @event {
    new: (){
        return @event::{
            listeners: [],
        }
    },
    emit: (self){
        for listener in self.listeners {
            listener!
        }
    },
    on: (self, function: @trigger_function | @group){
        self.listeners.push(function)
    },
}

return {
    touch: #[desc("Implementation of the touch trigger (returns an event)") example("
on(touch(), !{
    10g.move(10, 0)
})
    ")] (
        #[desc("Dual mode (only check for touch on the dual side)")] dual_side: @bool = false
    ) {
        let event = @event::new()
        $.add(trigger{
            OBJ_ID: 1595,
            HOLD_MODE: true,
            TOGGLE_MODE: 1,
            TARGET: !{event.emit()},
            DUAL_MODE: dual_side,
        })
        return event
    },

    touch_end: #[desc("Returns an event for when a touch ends") example("
on(touch_end(), !{
    10g.move(-10, 0)
})
    ")] (
        #[desc("Dual mode (only check for touch on the dual side)")] dual_side: @bool = false
    ) {
        let event = @event::new()
        $.add(trigger{
            OBJ_ID: 1595,
            HOLD_MODE: true,
            TOGGLE_MODE: 2,
            TARGET: !{event.emit()},
            DUAL_MODE: dual_side,
        })
        return event
    },

    collision: #[desc("Implementation of the collision trigger (returns an event)") example("
on(collision(1b, 2b), !{
    BG.set(255, 0, 0)
})
    ")] (
        #[desc("Block A ID")] a: @block,
        #[desc("Block B ID")] b: @block
    ) {
        let event = @event::new()
        $.add(trigger{
            OBJ_ID: 1815,
            BLOCK_A: a,
            BLOCK_B: b,
            ACTIVATE_GROUP: true,
            ACTIVATE_ON_EXIT: false,
            TARGET: !{event.emit()},
        })
        return event
    },

    collision_exit: #[desc("Returns an event for when a collision exits") example("
on(collision_exit(1b, 2b), !{
    BG.set(0, 0, 0)
})
    ")] (
        #[desc("Block A ID")] a: @block,
        #[desc("Block B ID")] b: @block
    ) {
        let event = @event::new()
        $.add(trigger{
            OBJ_ID: 1815,
            BLOCK_A: a,
            BLOCK_B: b,
            ACTIVATE_GROUP: true,
            ACTIVATE_ON_EXIT: true,
            TARGET: !{event.emit()},
        })
        return event
    },


    death: #[desc("Returns an event for when the player dies") example("
on(death(), !{
    BG.set(0, 0, 0)
})
    ")] (){
        let event = @event::new()
        $.add(trigger{
            OBJ_ID: 1812,
            ACTIVATE_GROUP: true,
            TARGET: !{event.emit()}
        })
        return event
    }
}

// utility macroes
#[no_std, cache_output]

bool_macro = _ -> @bool
MATCHER = @pattern | bool_macro

-> return {
    create_range_macro: (typ: @type_indicator) -> @macro {
        -> return (self, other: typ) {
            range = (self as @number)..(other as @number)
            let out = []
            for num in range {
                out.push(num as typ)
            }
            -> return out
        }
    },
    MATCHER,
    matches: (v, p: MATCHER) -> @bool => match p {
        @pattern: v is p,
        @macro: p(v)
    },
    prettify_time: (time: @number, max: @number = 3) -> @string {
        let microseconds = $.floor(time * 1000000)
        let milliseconds = $.floor(time * 1000)
        let seconds = $.floor(time)
        let minutes = $.floor(seconds / 60)
        let hours = $.floor(minutes / 60)
        let days = $.floor(hours / 24)
        let years = $.floor(days / 365)

        timings = [
            [years, "y"],
            [days % 365, "d"],
            [hours % 24, "h"],
            [minutes % 60, "m"],
            [seconds % 60, "s"],
            [milliseconds % 1000, "ms"],
            [microseconds % 1000, "Âµs"],
        ]

        let out = []
        let skip = false

        for i in 0..timings.length {
            if out.length >= max { break }
            [ quantity, scale ] = timings[i]
            if quantity > 0 || skip == true {
                out.push("{}{}".fmt([quantity, scale]))
                skip = true
            }
        }

        return out.join(' ')
    },
    cache_macro: (macro: @macro) -> @macro {
        let cache = @NULL
        return (){ // TODO: add ..args in the future when it will be supported
            if cache == @NULL {
                cache = macro() // TODO: add ..args in the future
            }
            return cache
        }
    },
}

#[no_std, cache_output]
constants = import "constants.spwn"
extract constants.obj_props
extract constants.comparisons

import "events.spwn"
extract import "util.spwn"

impl @item {

    add:
    #[desc("Implementation of the pickup trigger"), example("10i.add(5)")]
    (self, #[desc("Amount to add")] amount: @number) -> @NULL {
        $.add( trigger{
            OBJ_ID: 1817,
            COUNT: amount,
            ITEM: self,
        })
    },

    if_is:
    #[desc("Implementation of the instant count trigger"), example(u"
        10i.if_is(EQUAL_TO, 5, !{
            BG.pulse(rgb8(255, 0, 0), fade_out = 0.5)
        })
    ")]
    (
        self,
        #[desc("Comparison mode")] comparison: @comparison,
        #[desc("Number to compare with")] other: @number,
        #[desc("Target function if comparison is 'true'")] function: @trigger_function
    ) -> @NULL {
        $.add( trigger{
            OBJ_ID: 1811,
            TARGET: function,
            COUNT: other,
            ACTIVATE_GROUP: true,
            COMPARISON: comparison.id,
            ITEM: self,
        })
    },

    count:
    #[desc("Implementation of a count trigger (returns an event)"), example(u"
        on(4i.count(3), !{
            BG.set(rgb(0, 0, 0))
        })
    ")]
    (
        self,
        #[desc("Number to check against")] number: @number = 0
    ) -> @event {
        event = @event::new()
        $.add( trigger{
            OBJ_ID: 1611,
            TARGET: event.io,
            COUNT: number,
            ACTIVATE_GROUP: true,
            ITEM: self,
            COUNT_MULTI_ACTIVATE: true,
        })
        return event
    },

    compare:
    #[desc("Compare the ID to a number"), example(u"
        // be sure to use the comparison operators instead of this macro
        // e.g. `if 10i > 3 {`

        if 10i.compare(5) == 1 { // if the ID is greater than 5
            @log::runtime::flash(rgb8(255, 0, 0))
        }
    ")]
    (self, number: @number) -> in [ -1, 0, 1 ] {
        self.if_is(SMALLER_THAN, number, !{
            -> return -1
        })
        self.if_is(EQUAL_TO, number, !{
            -> return 0
        })
        self.if_is(LARGER_THAN, number, !{
            -> return 1
        })
    },

    _more_than_:
    #[desc("Implementation of (`>`) for item IDs"), example(u"
        if 4i > 3 {
            BG.set(rgb(0, 0, 0))
        }
    ")]
    (self, number: @number) -> @bool {
        return self.compare(number) == 1
    },

    _less_than_:
    #[desc("Implementation of (`<`) for item IDs"), example(u"
        if 4i < 3 {
            BG.set(rgb(0, 0, 0))
        }
    ")]
    (self, number: @number) -> @bool {
        return self.compare(number) == -1
    },

    _equal_:
    #[desc("Implementation of (`==`) for item IDs"), example(u"
        if 4i == 3 {
            BG.set(rgb(0, 0, 0))
        }
    ")]
    (self, number: @number) -> @bool {
        return self.compare(number) == 0
    },

    _not_equal_:
    #[desc("Implementation of (`!=`) for item IDs"), example(u"
        if 4i != 3 {
            BG.set(rgb(0, 0, 0))
        }
    ")]
    (self, number: @number) -> @bool {
        return self.compare(number) in [ -1, 1 ]
    },

    _more_or_equal_:
    #[desc("Implementation of (`>=`) for item IDs"), example(u"
        if 4i >= 3 {
            BG.set(rgb(0, 0, 0))
        }
    ")]
    (self, number: @number) -> @bool {
        return self.compare(number) in [ 0, 1 ]
    },

    _less_or_equal_:
    #[desc("Implementation of (`<=`) for item IDs"), example(u"
        if 4i <= 3 {
            BG.set(rgb(0, 0, 0))
        }
    ")]
    (self, number: @number) -> @bool {
        return self.compare(number) in [ -1, 0 ]
    },

    _range_: #[desc("Implementation of the range operator (`..`) for item IDs"), example(u"
        for item in 1i..10i {
            item.add(10)
        }
    ")] create_range_macro(@item),
}

#[no_std, cache_output]

constants = import "constants.spwn"
extract constants.obj_ids
extract constants.obj_props
extract import 'events.spwn'
extract import 'control_flow.spwn'
extract import 'util.spwn'
import "counter.spwn"

frames_setup = cache_macro(() {
    block_a = ?b
    block_b = ?b
    group_toggle = ?g
    group_first = ?g
    group_second = ?g
    group_frame = ?g

    $.add(obj{
        OBJ_ID: special.COLLISION_BLOCK,
        X: 0,
        Y: 2400,
        BLOCK_A: block_a,
        GROUPS: group_toggle,
        DYNAMIC_BLOCK: true,
    })
    $.add(obj{
        OBJ_ID: special.COLLISION_BLOCK,
        X: 0,
        Y: 2400,
        BLOCK_A: block_b,
    })

    collision(block_a, block_b).on(!{
        group_toggle.toggle_off()
        group_first!
        group_frame!
    })
    collision_exit(block_a, block_b).on(!{
        group_toggle.toggle_on()
        group_second!
        group_frame!
    })

    on(x_position(1), !{
        group_toggle.toggle_off()
    })

    return {
        block_a: block_a,
        block_b: block_b,
        group_toggle: group_toggle,
        group_first: group_first,
        group_second: group_second,
        group_frame: group_frame,
    }
})

return {
    frames: #[desc("Waits for an arbitrary amount of frames"), example(u"
        @log::runtime::flash(rgb(1,0,0)) // flash the screen
        frames(60) // wait 60 frames (1 second on 60fps)
        @log::runtime::flash(rgb(0,0,1)) // flash the screen
    ")] (
        #[desc("The amount of frames to wait")] frames: @number|@counter,
    ) -> @NULL {
        frames_count = @counter::new(bits = $.ceil($.log(frames, 2)))

        let frames = match frames {
            @number: frames.floor(),
            @counter: frames.clone(),
        }

        extern = !{
            if frames_count < frames {
                frames_count++
            } else if frames_count == frames {
                frames_count++
                -> return
            }
        }

        current_context = $.trigger_fn_context()

        $.extend_trigger_func(frames_setup().group_frame, (){
            suppress_signal_until(current_context)
            extern!
        })
    },

    frame: #[desc("Returns an event that runs on every frame"), example(u"
        on(frame(), !{
            10g.move(1, 0) // moves every frame (on 60fps the block would move by 6 blocks per second)
        })
    ")] () -> @event {
        event = @event::new()
        $.extend_trigger_func(
            frames_setup().group_frame,
            () => event.emit(),
        )
        return event
    },
}

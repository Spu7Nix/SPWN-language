#[no_std, cache_output]

type @zip

impl @zip {
    new: #[constructor, desc("Returns a zip object")]
    (iter1: @array | @string | @dictionary, iter2: @array | @string | @dictionary) {
        let iters = [iter1, iter2]

        for i in 0..2 {
            if iters[i].type == @dictionary {
                let ret = []
                for el in iters[i] {
                    ret.push(el)
                }
                iters[i] = ret
            }
        }

        if iters[0].length != iters[1].length {
            $.print(iters)
            throw "Length Mismatch: iterables must be of same length"
        }

        return @zip::{
            iter1: iters[0],
            iter2: iters[1]
        }
    },

    _as_: #[desc("Returns the dict version") example("
x = ['a', 'b', 'c']
y = ['x', 'y', 'z']
$.assert(@zip::new(x, y) as @dict == {a: 'x', b: 'y', c: 'z'})
    ")]
    (self, _type: @type_indicator) {
        if _type != @dictionary {
            throw "CastingError: Cannot convert @zip to @dict"
        }

        let ret_dict = {}
        for i in 0..self.iter1.length {
            ret_dict.set(self.iter1[i] as @string, self.iter2[i])
        }

        return ret_dict
    }
}
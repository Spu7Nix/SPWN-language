#[no_std, cache_output]

array_callback = (cb: @macro, value, index: @number, array: @array) -> _ {
    return match cb {
        ()->_: cb(),
        (_)->_: cb(value),
        (_,_)->_: cb(value, index),
        (_,_,_)->_: cb(value, index, array),
        else: (){
            throw "Expected 0 to 3 macro arguments, got {} arguments.".fmt(cb.args.length)
        }(),
    }
}

impl @array {

    is_empty: #[desc("Returns true if the array has a length of 0, false otherwise."), example(u"
        arr = []
        arr2 = [1, 2, 3]
        $.assert(arr.is_empty())
        $.assert(!arr2.is_empty())
    ")]
    (self) -> @bool {
        return self.length == 0;
    },

    max: #[desc("Gets the highest number in the array."), example(u"
        arr = [3, 1, 4, 1]
        $.assert(arr.max() == 4)

        arr2 = ['abc', 'b', 'abdc']
        $.assert(arr2.max(key = (el: @string) => el.length) == 'abdc')
    ")]
    (self, key: _ -> _ = (el) => el) -> _ {
        let highest = self[0]

        for el in self {
            if key(el) > key(highest) {
                highest = el
            }
        }
        
        return highest
    },

    min: #[desc("Gets the lowest number in the array."), example(u"
        arr = [3, 1, 4, 1]
        $.assert(arr.min() == 1)

        arr2 = ['abc', 'b', 'abdc']
        $.assert(arr2.min(key = (el: @string) => el.length) == 'b')
    ")]
    (self, key: _ -> _ = (el) => el) -> _ {
        let lowest = self[0]

        for el in self {
            if key(el) < key(lowest) {
                lowest = el
            }
        }
        return lowest
    },

    contains: #[desc("See if array contains an element."), example(u"
        fruit = ['apple', 'banana', 'mango']
        $.assert(fruit.contains('banana'))
    ")]
    (self, el) -> @bool {
		return el in self
	},

    join: #[desc("Joins the array using the string."), example(u"
        fruit = ['apple', 'banana', 'mango']
        $.assert(fruit.join(' ') == 'apple banana mango')
    ")]
    (self, joiner: @string = ' ') -> @string {
        let output = ''
        for i in 0..self.length {
            if i > 0 { output += joiner }
            output += self[i] as @string
        }
        return output
    },

    index: #[desc("Gets the index of an element (if it doesn't exist, `null` is returned)"), example(u"
        fruit = ['apple', 'banana', 'mango']
        $.assert(fruit.index('apple') == 0)
        $.assert(fruit.index('carrot') == null)
    ")]
    (self, el, #[desc("Index to start the search from")] from: @number = 0) -> @number | @NULL {
        for i in from..self.length {
            if self[i] == el {
                return i
            }
        }
        return null
    },

    index_last: #[desc("Gets the index of the last occurence of an element (if it doesn't exist, `null` is returned)"), example(u"
        arr = [1,-5,2,4,2,6]
        $.assert(arr.index_last(2) == 4)
        $.assert(arr.index_last(-3) == null)
    ")]
    (self, el, #[desc("Index to end the search at")] until: @number = 0) -> @number | @NULL {
        for i in self.length..until {
            if self[i] == el {
                return i
            }
        }
        return null
    },

    index_all: #[desc("Returns an array of all occurences of an element"), example(u"
arr = [1,-5,2,4,2,6]
$.assert(arr.index_all(2) == [2,4])
    ")]
    (self, el) -> [@number] {
        let occurences = []
        for i in 0..self.length {
            if self[i] == el {
                occurences.push(i)
            }
        }
        return occurences
    },

    clear: #[desc("Clears the array."), example(u"
        let arr = [1, 2, 3]
        arr.clear()
        $.assert(arr.is_empty())
    ")]
    (self) -> @NULL {
        self = []
    },

    reverse: #[desc("Reverses the array."), example(u"
        let arr = [1, 2, 3]
        $.assert(arr.reverse() == [3, 2, 1])
    ")]
    (self) -> @array {
        if self.length == 0 {
            return [];
            break
        }
        let ret = [];
        for i in 1..self.length {
            ret.push(self[-i]);
        }
        ret.push(self[0]);
        return ret;
    },

    average: #[desc("Returns the average of the numbers in the array."), example(u"
        let arr = [5, 1, 5, 3, 2]
        $.assert(arr.average() == 3.2)
    ")]
    (self) -> @number {
        numbers = self.filter(v => (v is @number))
        return numbers.sum() / numbers.length if numbers.length > 0 else 0
    },

    center: #[desc("Returns the item in the center of the array."), example(u"
        let arr = [5, 1, 5, 3, 2]
        $.assert(arr.center() == 5)
        $.assert(arr.center(true) == 5)

        let arr = [5, 1, 5, 3]
        $.assert(arr.center() == 1)
        $.assert(arr.center(true) == 5)   
    ")]
    (self, ceil: @bool = false) -> _ {
        if self.length == 0 {return null}
        center = self.length / 2 - 0.5
        index = $.ceil(center) if ceil else $.floor(center)
        return self[index]
    },

    most: #[desc("Returns the item that appears most times."), example(u"
        let arr = [5, 1, 5, 3, 2]
        $.assert(arr.most() == 5)
    ")]
    (self, last: @bool = false) -> _ {
        if self.length == 0 {return null}
        let array = []
        let tracker = {}
        let mass = [0,0] // index, count
        for item in self {
            if array.contains(item) {
                index = array.index(item)
                key = index as @string
                count = tracker.get(key) + 1
                tracker.set(key, count)
                if count > mass[1] || (last && count == mass[1]) {
                    mass = [index,count]
                }
            } else {
                array.push(item)
                tracker.set((array.length-1) as @string, 1)
            }
        }
        return array[mass[0]]
    },

    partition: #[desc("Partitions the array into two arrays where the first array resulted into true and the second array resulted into false."), example(u"
        let arr = [5, 1, 5, 3, 2]
        let [bigger, smaller] = arr.partition(v => v > 4)
        $.assert(bigger == [5, 5])
        $.assert(smaller == [1, 3, 2])
    ")]
    (self, cb: @macro = (item) => true) -> [@array] {
        let partition = [[],[]]
        for item in self {
            result = cb(item)
            index = !(result as @bool) as @number
            partition[index].push(item)
        }
        return partition
    },
    
    to_dictionary: #[desc("Converts an array to a dictionary"), example(u"
	array = ["h"]
	dictionary = array.to_dictionary()
	$.print(dictionary == {1: "h"}) // true
    ")]
    (self) {
    	let dict = {}
	for key in self.enumerate(true) {
	    dict[key.index as @string] = key.value
	}
	return dict
    },
    
    shuffle: #[desc("Returns the array in random order."), example(u"
        let arr = [5, 1, 5, 3, 2]
        $.print(arr.shuffle())
    ")]
    (self) -> @array {
        let clone = self
        let array = []
        while clone.length > 0 {
            item = clone.pop($.random(0..clone.length))
            array.push(item)
        }
        return array
    },

    unique: #[desc("Returns the array only with items that didn't appear before."), example(u"
        let arr = [5, 1, 5, 3, 2]
        $.assert(arr.unique() == [5, 1, 3, 2])
    ")]
    (self) -> @array {
        let array = []
        for item in self {
            if !array.contains(item) {
                array.push(item)
            }
        }
        return array
    },

    pick: #[desc("Returns an item from the array by random."), example(u"
        let arr = [5, 1, 5, 3, 2]
        $.print(arr.pick())
    ")]
    (self){
        return $.random(self)
    },

    push: #[desc("Pushes a value to the end of the array."), example(u"
        let arr = [1, 2, 3]
        arr.push(4)
        $.assert(arr == [1, 2, 3, 4])
    ")]
    (self, value) -> @NULL {
        $.append(self, value)
    },

    pop: #[desc("Removes a specific index from the array and returns it."), example(u"
        let arr = [1, 2, 3, 4]
        arr.pop()
        $.assert(arr == [1, 2, 3])
        arr.pop(1)
        $.assert(arr == [1, 3])
    ")]
    (self, index: @number = -1) -> _ {
        let index = index % self.length // to correct for negative values
        return $.remove_index(self, index)
    },

    remove: #[desc("Returns the array with the elements at the provided index or indices removed"), example(u'
        let arr = ["a", "b", "c"]
        $.assert(arr.remove(1) == ["a", "c"])

        let arr = ["a", "b", "c", "d", "e"]
        $.assert(arr.remove([1, 4]) == ["a", "c", "d"])
    ')]
    (self, index: @number | [@number]) -> @array {
        matches = (i => i == index) if index is @number else (i => i in index)
        return self.filter((_, i) => !matches(i))
    },
    
    erase: #[desc("Returns the array with the elements that match the value provided removed"), example(u'
        let arr = ["a", "b", "c"]
        $.assert(arr.erase("c") == ["a", "b"])
    ')]
    (self, value) -> @array {
        return self.filter(el => el != value)
    },

    map: #[desc("Calls a defined callback function on each element of an array, and returns an array that contains the results, or modifies in place if specified."), example(u"
        arr = [1, 2, 3, 4, 5]
        $.assert(arr.map(el => el * 2) == [2, 4, 6, 8, 10])
        $.assert(arr.map((el,ind) => el * ind) == [0, 2, 6, 12, 20])
        $.assert(arr.map((el,ind,arr) => el * arr[ind*2%arr.length]) == [1, 6, 15, 8, 20])
    ")]
    (
        self,
        #[desc("Callback can have from 0 to 3 arguments, `(value, index, array)`")] cb: @macro
    ) -> @array {
        let output = [];
        for index in 0..self.length {
            value = self[index]
            current = array_callback(cb, self[index], index, self)
            output.push(current)
        }
        return output;
    },

    filter: #[desc("Returns the elements of an array that meet the condition specified in the callback function."), example(u"
        arr1 = [1, 2, 3, 4, 5]
        $.assert(arr1.filter(el => el > 3) == [4, 5])
        $.assert(arr1.filter(>3) == [4, 5])

        arr2 = ['a', 1, true, 'b', 2, false, 'c']
        $.assert(arr2.filter(@number) == [1, 2])
        $.assert(arr2.filter(@string) == ['a', 'b', 'c'])
        $.assert(arr2.filter(@bool) == [true, false])

    ")]
    (self, cb: @macro) -> @array | @NULL {
        let output = [];
        for index in 0..self.length {
            value = self[index]
            if cb is @macro {
                current = array_callback(cb, value, index, self)
                if current is @bool {
                    if current { output.push(value) }
                } else {
                    throw "Filter must return a boolean value";
                }
            } else {
                if value is cb { output.push(value) }
            }
        }
        return output
    },
    reduce: #[desc("Calls the specified callback function for all the elements in an array with a default value. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."),
    example(u"
        arr = [1, 2, 3, 4, 5]
        sum = arr.reduce((acum, el) => acum + el)
        $.assert(sum == 15)

        arr2 = [5, 1, 5, 3, 2]
        product = arr2.reduce((acum, el) => acum * el, 1)
        $.assert(product == 150)
    ")]
    (self, cb: ((_, _) -> _), default = 0) -> _ {
        let acum = default;
        for iter in self {
            acum = cb(acum, iter);
        }
        return acum;
    },

    l_fold: #[desc("Calls the specified callback function for all the elements in an array from left to right. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."),
    example(u"
        arr = [1, 2, 3, 4, 5]
        sum = arr.l_fold($._plus_)
        $.assert(sum == 15)

        arr2 = [2, 1, 5]
        result = arr2.l_fold($._divided_by_)
        $.assert(result == 0.4)
    ")]
    (self, cb: ((_, _) -> _)) -> _ {
        let acum = self[0];
        for iter in 1..self.length {
            acum = cb(acum, self[iter]);
        }
        return acum;
    },

    r_fold: #[desc("Calls the specified callback function for all the elements in an array from right to left. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."),
    example(u"
        arr = [1, 2, 3, 4, 5]
        sum = arr.r_fold($._plus_)
        $.assert(sum == 15)

        arr2 = [2, 1, 5]
        result = arr2.r_fold($._divided_by_)
        $.assert(result == 10)
    ")]
    (self, cb: ((_, _) -> _)) -> _ {
        let acum = self[-1];
        for iter in (self.length - 1)..0 {
            acum = cb(self[iter], acum);
        }
        return acum;
    },

    any: #[
        desc("Determines whether the specified callback function returns true for any element of an array."),
        example(u"
            arr = [false, false, true, false]
            $.assert(arr.any())
            arr2 = [1, 2, 3, 1, 4, -1, 7]
            $.assert(arr2.any(el => el < 0)) // checks if the array contains any negative elements
            $.assert(arr2.any(>0) == true)
            $.assert(arr2.any(@string) == false)
            $.assert(arr2.any(@number) == true)
        ")
    ]
    (self, cb: (_ -> @bool) | @pattern | @type_indicator = (a) => @bool(a)) -> @bool {
        for index in 0..self.length {
            value = self[index]
            if cb is @macro {
                current = array_callback(cb, value, index, self)
                if current is @bool {
                    if current { return true }
                } else {
                    throw "Filter must return a boolean value";
                }
            } else {
                if value is cb { return true }
            }
        }
        return false
    },

    all: #[desc("Determines whether all the members of an array satisfy the specified callback."), example(u"
        arr = [true, true, true]
        $.assert(arr.all())
        arr2 = [1, 2, 3, 1, 4, 7]
        $.assert(arr2.all(el => el > 0)) // checks if the array contains only positive elements
        $.assert(arr2.all(@number) == true)
    ")]
    (self, cb: (_ -> @bool) | @pattern | @type_indicator = (a) => @bool(a)) -> @bool {
        for index in 0..self.length {
            value = self[index]
            if cb is @macro {
                current = array_callback(cb, value, index, self)
                if current is @bool {
                    if !current { return false }
                } else {
                    throw "Filter must return a boolean value";
                }
            } else {
                if !(value is cb) { return false }
            }
        }
        return true
    },

    sum: #[desc("Gets the sum of the values in the array."), example(u"
        arr = [1, 2, 3, 4, 5]
        $.assert(arr.sum() == 15)
        arr2 = ['abc', 'ab', 'abcd']
        $.assert(arr2.sum(a => a.length) == 9)
    ")]
    (self, cb: _ -> _ = a => a) -> _ {
        let result = cb(self[0])
        for i in self[1:] {
            result += cb(i)
        }
        return result
    },

    sort: #[desc("Returns a sorted verison of the array"), example(u"
        let arr = [5, 1, 5, 3, 2]
        $.assert(arr.sort() == [1, 2, 3, 5, 5])

        let arr = [5, 1, 5, 3, 2]
        $.assert(arr.sort(comp = (a, b) => a >= b) == [5, 5, 3, 2, 1])
    ")]
    (self, comp: (_,_) -> @bool | @number = (a, b) => a <= b) -> @array {
        let array = self
        if array.length <= 1 { return array }
        pivot = array.pop($.random(0..array.length))
        [ truthy, falsy ] = array.partition((i){
            result = comp(i,pivot)
            return match result {
                @bool: result,
                @number: result < 0,
            }
        })
        return truthy.sort(comp = comp) + [pivot] + falsy.sort(comp = comp) // heskell quicksort goes brr
    },

    sorted: #[desc("Returns true if the array is sorted."), example(u"
        $.assert([5, 1, 5, 3, 2].sorted() == false)
        $.assert([1, 2, 3, 5, 5].sorted() == true)
        $.assert([5, 5, 3, 2, 1].sorted(comp = (a, b) => a >= b) == true)
    ")]
    (self, comp: (_, _) -> @bool = (a, b) => a <= b) -> @bool {
        for i in 1..self.length {
            if !comp(self[i-1], self[i]) {
                return false
            }
        }
        return true
    },

    shift: #[desc("Removes the first index from the array and returns it."), example(u"
        let arr = [5, 1, 5, 3, 2]
        $.assert(arr.shift() == 5)
        $.assert(arr == [1, 5, 3, 2])
    ")]
    (self) -> _ {
        return self.pop(0)
    },

    unshift: #[desc("Pushes a value to the start of the array and returns it."), example(u"
        let arr = [1, 5, 3, 2]
        $.assert(arr.unshift(5) == 5)
        $.assert(arr == [5, 1, 5, 3, 2])
    ")]
    (self, value) -> _ {
        self = [value] + self
        return value
    },

    insert: #[desc("Pushes a value at a certain index of the array and returns it."), example(u"
        let arr = [1, 5, 3, 2]
        $.assert(arr.insert(2, 7) == 7)
        $.assert(arr == [1, 5, 7, 3, 2])
    ")]
    (self, index: @number, value) -> _ {
        self = self[:index] + [value] + self[index:]
        return value
    },

    flatten: #[desc("Flattens any sub-arrays into one big array."), example(u"
        arr = [1, 2, [3, 4], 5, [6, 7, [8]]]
        $.assert(arr.flatten() == [1, 2, 3, 4, 5, 6, 7, 8])
    ")]
    (self) -> @array {
        let output = [];

        for elem in self {
            if elem.type != @array {
                output.push(elem)
            } else {
                for i in elem.flatten() {
                    output.push(i)
                }
            }
        }

        return output
    },

    enumerate: #[desc("Returns an array of index-element pairs"), example(u"
        arr = ['a','b','c']
        $.assert(arr.enumerate() == [[0,'a'],[1,'b'],[2,'c']])
        $.assert(arr.enumerate(true) == [{index: 0, value: 'a'},{index: 1, value: 'b'},{index: 2, value: 'c'}])
    ")]
    (self, #[desc("Return the pair as a dictionary or array")] dict: @bool = false) -> [@dictionary | @array] {
        return @array(0..self.length).map(i => {index: i, value: self[i]} if dict else [i, self[i]])
    },

    split: #[desc("Splits the array on the indicies"), example(u"
        x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  
        $.assert(x.split([5]) == [[0,1,2,3,4],[5,6,7,8,9]])
        $.assert(x.split([5, 7]) == [[0,1,2,3,4],[5,6],[7,8,9]])
    ")]
    (self, indicies: [@number]) -> [@array] {
        let indicies = indicies.filter(>=0).unique().sort()

        let ret_arr = []

        ret_arr.push(self[0:indicies[0]])

        for i in 1..indicies.length {
            ret_arr.push(self[indicies[i-1]: indicies[i]])
        }
        
        ret_arr.push(self[indicies[indicies.length - 1]:])

        return ret_arr
    },

    scan: #[desc("Takes in an initial value and a macro which acts on a reference of that value and each array value."), example(u"
        x = [1,2,3]
        x_1 = x.scan(10, (&state, x){
            state *= x
            return -state
        })
        $.assert(x_1 == [-10, -20, -60])
    ")]
    (self, state, closure: (_, _) -> _) -> @array { // TODO: add & in macro patterns
        let state = state
        let ret_arr = []

        for i in self {
            ret_arr.push( closure(state, i) )
        }

        return ret_arr
    },
}

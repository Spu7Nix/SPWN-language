#[no_std, cache_output]

impl @number {
    map: #[desc("Maps a number linearily from one interval to another") example("$.assert(2.map(1, 4, 5, 11) == 7)")]
    (self, istart: @number, istop: @number, ostart: @number, ostop: @number) -> @number {
        return ostart + (ostop - ostart) * ((self - istart) / (istop - istart))
    },
    clamp: #[desc("Constrains a number between two numbers") example("$.assert(2.clamp(7,10) == 7)")]
    (self, min: @number, max: @number) -> @number {
        return $.min($.max(self,min),max)
    },
    wrap: #[desc("Wraps a number between two numbers") example("$.assert(8.clamp(7,10) == 8 && 11.clamp(7,10) == 8)")]
    (self, min: @number, max: @number) -> @number {
        return ((self - min) % (max - min)) + min
    },
    is_finite: #[desc("Checks if the number is finite") example("$.assert((0/0).is_finite()) == false")]
    (self) -> @bool {
        return self - self == 0
    },
}



#[no_std, cache_output]

import 'string.spwn'
extract import 'constants.spwn'

impl @number {
    abs: #[desc("Returns the absolute value of the number"), example("$.assert((-1).abs() == 1)")]
    (self) -> @number => self if self >= 0 else -self,
    sign: #[desc("Returns the sign of the number, also works with -0"), example("$.assert((-69).sign() == -1)")]
    (self) -> @number => self if self == 0 else ((-1) if self < 0 else 1),
    round: #[desc("Returns the nearest integer to the number"), example("$.assert((1.5).round() == 2)")]
    (self) -> @number => $.round(self),
    ceil: #[desc("Returns the smallest integer greater than or equal to the number"), example("$.assert((1.5).ceil() == 2)")]
    (self) -> @number => $.ceil(self),
    floor: #[desc("Returns the largest integer less than or equal to the number"), example("$.assert((1.5).floor() == 1)")]
    (self) -> @number => $.floor(self),
    fract: #[desc("Returns the fractional part of the number"), example("$.assert((1.5).fract() == 0.5)")]
    (self) -> @number => $.fract(self),
    trunc: #[desc("Returns the integer part of the number"), example("$.assert((1.5).trunc() == 1)")]
    (self) -> @number => $.trunc(self),
    sin: #[desc("Returns the sine of the number"), example("$.assert(PI.sin().to_precision(10) == 0)")]
    (self) -> @number => $.sin(self),
    cos: #[desc("Returns the cosine of the number"), example("$.assert(PI.cos().to_precision(10) == -1)")]
    (self) -> @number => $.cos(self),
    tan: #[desc("Returns the tangent of the number"), example("$.assert(PI.tan().to_precision(10) == 0)")]
    (self) -> @number => $.tan(self),
    sqrt: #[desc("Returns the square root of the number"), example("$.assert(4.sqrt() == 2)")]
    (self) -> @number => $.sqrt(self),
    log: #[desc("Returns the logarithm of the number (default: natural logarithm)"), example("$.assert(2.log() == 0.6931471805599453)")]
    (self, base = EULER) -> @number => $.log(self, base),
    lerp: #[desc("Returns the linear interpolation between the two numbers"), example("$.assert((0.7).lerp(0,2) == 1.4)")]
    (self, lower, higher) -> @number => lower + (higher - lower) * self,
    map: #[desc("Maps a number linearily from one interval to another"), example("$.assert(2.map(1, 4, 5, 11) == 7)")]
    (self, istart: @number, istop: @number, ostart: @number, ostop: @number) -> @number {
        return ostart + (ostop - ostart) * ((self - istart) / (istop - istart))
    },
    clamp: #[desc("Constrains a number between two numbers"), example("$.assert(2.clamp(7,10) == 7)")]
    (self, min: @number, max: @number) -> @number {
        return $.min($.max(self,min),max)
    },
    wrap: #[desc("Wraps a number between two numbers"), example("$.assert(8.clamp(7,10) == 8 && 11.clamp(7,10) == 10)")]
    (self, min: @number, max: @number) -> @number {
        return ((self - min) % (max - min)) + min
    },
    ordinal: #[desc("Returns the number in ordinal form"), example("$.assert(1.ordinal() == '1st')")]
    (self) -> @string {
        number = self.trunc()
        numb_abs = number.abs()
        return match true {
            ==(((numb_abs % 100) / 10).floor() == 1): "{}th",
            ==(numb_abs % 10 == 1): "{}st",
            ==(numb_abs % 10 == 2): "{}nd",
            ==(numb_abs % 10 == 3): "{}rd",
            else: "{}th",
        }.fmt(number)
    },
    to_fixed: #[desc("Turns the number into a string with the given precision"), example("$.assert(1.to_fixed(2) == '1.00')")]
    (self, precision: @number = 0) -> @string {
        let precision = precision.ceil()
        let string = self as @string
        if string == "NaN" {
            throw "Input number is NaN"
        }
        let dot_index = string.index(".")
        if dot_index == null {
            dot_index = string.length
            if string.length - dot_index + precision <= 0 { return string }
            string += "."
        }
        string = string.r_pad(dot_index + precision + 1, "0")
        string = string.substr(0, dot_index + precision + 1)
        return string.r_trim(".") // hopefully chaining will be fixed soon
    },
    to_precision: #[desc("Turns the number to a specific precision"), example("$.assert((0.12345).to_precision(3) == 0.123)")]
    (self, precision: @number = 0) -> @number => self.to_fixed(precision) as @number,
}



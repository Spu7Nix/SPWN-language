#[no_std, cache_output]

#[desc("A type for handling filesystem operations")]
type @path

absolute_regex = r"^([a-zA-Z]:|~)?[\/]"

error = (
    path: @path,
    has_to_exist: @pattern = null,
    has_to_be_kind: @pattern = null,
    kind_notes: [@bool|@string] = null,
    has_to_be_readonly: @pattern = null,
) {
    unknown_error = "Unknown error"

    let errors = []
    if has_to_exist is @pattern && !(path.exists() is has_to_exist) {
        errors.push("Path `{}` does {} exist".fmt([path.format(), "already" if path.exists() else "not"]))
    }
    if path.exists() {
        if has_to_be_kind is @pattern && !(path.kind() is has_to_be_kind) {
            errors.push("Path `{}` is{} a `{}`".fmt([path.format(), " not" if kind_notes[0] else "", kind_notes[1]]))
        }
        if has_to_be_readonly is @pattern && !(path.readonly() is has_to_be_readonly) {
            errors.push("Path `{}` is{} read-only".fmt([path.format(), "" if path.readonly() else " not"]))
        }
    }
    return errors
}

impl @path {
    new: #[constructor, desc("Creates a new path")] (path: @string) -> @path {
        parsed = @path::parse(path)
        return @path::{
            root: parsed.root,
            dirs: parsed.dirs,
            name: parsed.name,
            ext: parsed.ext,
        }
    },
    cwd: #[constructor, desc("Returns the current working directory path")]
    () -> @path => @path::new($.cwd()),

    parse: #[desc("Parses a path")] (path: @string) -> @dictionary {
        let path = path.replace(r"\\","/").replace(r"/+","/")
        let root_find = path.find_all(absolute_regex)
        let [root, path] = path.split([root_find[0][1]]) if root_find.length > 0 else ["", path]
        let root = root.uppercase()
        let dirs = path.trim("/").split(r"/")
        if dirs.length > 0 {
            extract @path::parse_basename(dirs.pop())
            let new_dirs = []
            for dir in dirs {
                if dir.ends_with("..") {
                    if dir.length > 2 {
                        // "abc../" should be ignored 
                    } else if new_dirs.length > 0 {
                        new_dirs.pop()
                    } else if root == "~/" {
                        root = "/"
                        new_dirs.push("home")
                    }
                } else if dir != "." {
                    new_dirs.push(dir)
                }
            }
            return {
                root: root,
                dirs: new_dirs,
                name: name,
                ext: ext,
            }
        } else {
            return {
                root: root,
                dirs: [],
                name: "",
                ext: "",
            }
        }
    },
    parse_basename: #[desc("Parses a path's basename")] (base: @string) -> @dictionary {
        let base = base.split(r".")
        let ext = ".{}".fmt(base.pop()) if base.length > 1 else ""
        let name = base.join(".") if base.length > 1 else base[0]
        return {
            name: name,
            ext: ext,
        }
    },
    join: #[desc("Gives the previous path joined with the new path")] (self, path: @string|@path) -> @path {
        return match path {
            @string: @path::new(self.format() + "/" + path),
            @path: @path::new("{}/{}".fmt([self.format(), path.format()])),
        }
    },
    format: #[desc("Formats a path")] (self) -> @string {
        let formatted = "{}{}{}{}".fmt([
            self.root,
            self.dirs.join("/"),
            "/" if self.dirs.length > 0 && self.basename().length > 0 else "",
            self.basename(),
        ])

        return formatted if formatted.length > 0 else "./"
    },
    basename: #[desc("Returns the basename of the path")] (self) -> @string {
        return "{}{}".fmt([
            self.name,
            self.ext,
        ])
    },
    squash: #[desc("Squashes the path (puts basename into dir)")] (self) -> @path {
        let path = self
        if path.basename().length > 0 {
            path.dirs.push(path.basename())
            path.name = ""
            path.ext = ""
        }
        return path
    },
    // ^ v I have no idea how to call these two
    stretch: #[desc("Stretches the path (puts last dir into basename)")] (self) -> @path {
        let path = self
        if path.dirs.length > 0 && path.basename().length == 0 {
            extract @path::parse_basename(path.dirs.pop())
            path.name = name
            path.ext = ext
        }
        return path
    },

    // helper methods
    is_absolute: #[desc("Returns whether the path is absolute")]
    (self) -> @bool => self.root.length > 0,
    is_relative: #[desc("Returns whether the path is relative")]
    (self) -> @bool => self.root.length == 0,

    // FS general
    exists: #[desc("Returns whether the path exists")]
    (self) -> @bool {
        return $.fileexists(self.format())
    },
    kind: #[desc("Returns the kind of the file")]
    (self) -> @string {
        err = error(
            self,
            has_to_exist = ==true,
        )
        if err.length > 0 { throw err[0] }
        return $.filekind(self.format())
    },
    metadata: #[desc("Returns the metadata of the file")]
    (self) -> @dictionary {
        err = error(
            self,
            has_to_exist = ==true,
        )
        if err.length > 0 { throw err[0] }
        return $.metadata(self.format())
    },
    readonly: #[desc("Returns whether the file is read-only")]
    (self) -> @bool {
        err = error(
            self,
            has_to_exist = ==true,
        )
        if err.length > 0 { throw err[0] }
        return $.metadata(self.format()).readonly
    },

    // FS file operations
    read: #[desc("Reads the contents of the file")]
    (self, mode: @string = "text") -> @array|@bool|@dictionary|@number|@string {
        err = error(
            self,
            has_to_exist = ==true,
            has_to_be_kind = =="file",
            kind_notes = [true, "file"],
        )
        if err.length > 0 { throw err[0] }
        return $.readfile(self.format(), mode)
    },
    write: #[desc("Writes the contents to the file (it will overwrite previous contents)")]
    (self, contents: @string) -> @NULL {
        err = error(
            self,
            has_to_be_readonly = ==false,
            has_to_be_kind = =="file",
            kind_notes = [true, "file"],
        )
        if err.length > 0 { throw err[0] }
        $.writefile(self.format(), contents)
    },
    append: #[desc("Appends the contents to the file")] (self, contents: @string) -> @NULL {
        err = error(
            self,
            has_to_be_readonly = ==false,
            has_to_be_kind = =="file",
            kind_notes = [true, "file"],
        )
        if err.length > 0 { throw err[0] }
        if self.exists() {
            $.writefile(
                self.format(),
                $.readfile(self.format()) + contents,
            )
        } else {
            $.writefile(self.format(), contents)
        }
    },
    delete: #[desc("Deletes the file")] (self) -> @NULL {
        err = error(
            self,
            has_to_exist = ==true,
            has_to_be_readonly = ==false,
            has_to_be_kind = =="file",
            kind_notes = [true, "file"],
        )
        if err.length > 0 { throw err[0] }
        $.deletefile(self.format())
    },

    // FS directory operations
    readdir: #[desc("Reads the contents of the directory")] (self) -> [@string] {
        err = error(
            self,
            has_to_exist = ==true,
            has_to_be_kind = =="dir",
            kind_notes = [true, "dir"],
        )
        if err.length > 0 { throw err[0] }
        return $.readdir(self.format())
    },
    mkdir: #[desc("Creates the directory")] (
        self,
        #[desc("Creates all the directories in the path")] recursive: @bool = false,
    ) -> @NULL {
        if recursive {
            new_path = self.squash()
            for i in 0..new_path.dirs.length {
                let path = new_path
                path.dirs = path.dirs[0:i+1]
                if path.exists() == false {
                    $.mkdir(path.format())
                }
                error(
                    path,
                    has_to_be_kind = =="dir",
                    kind_notes = [true, "dir"],
                )
                if err.length > 0 { throw err[0] }
            }
        } else {
            err = error(
                self,
                has_to_exist = ==false,
            )
            if err.length > 0 { throw err[0] }
            $.mkdir(self.format())
        }
    },
    rmdir: #[desc("Removes the directory")]
    (
        self,
        #[desc("Removes the entire directory with it's contents if set to true (be careful!)")] recursive: @bool = false,
    ) -> @NULL {
        err = error(
            self,
            has_to_exist = ==true,
            has_to_be_readonly = ==false,
            has_to_be_kind = =="dir",
            kind_notes = [true, "dir"],
        )
        if err.length > 0 { throw err[0] }
        if recursive {
            $.rmdir_all(self.format())
        } else {
            $.rmdir(self.format())
        }
    },

    // other
    open: #[desc("Gives a @file object of the file")] (self) -> @file {
        return @file::new(self.format())
    },

    // implementations
    _display_: #[desc("Displays the path")] (self) -> @string => self.format(),
}

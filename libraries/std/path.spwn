#[no_std, cache_output]

#[desc("A type for handling filesystem operations")]
type @path

absolute_regex = r"^([a-zA-Z]:|~)?[\/]"

impl @path {
    new: #[desc("Creates a new path")] (path: @string) -> @path {
        parsed = @path::parse(path)
        return @path::{
            root: parsed.root,
            dir: parsed.dir,
            name: parsed.name,
            ext: parsed.ext,
        }
    },
    parse: #[desc("Parses a path")] (path: @string) -> @dictionary {
        let path = path.replace(r"\\","/").replace(r"/+","/")
        let root_find = path.find_all(absolute_regex)
        let [root, path] = path.split([root_find[0][1]]) if root_find.length > 0 else ["", path]
        let dirs = path.trim("/").split(r"/")
        if dirs.length > 0 {
            let base = dirs.pop().split(r".")
            let ext = ".{}".fmt(base.pop()) if base.length > 1 else ""
            let name = base.join(".") if base.length > 1 else base[0]
            let dirs = dirs.filter(dir => !dir.ends_with("../")).map(dir => dir.r_trim("."))
            return {
                root: root,
                dir: dirs.join("/"),
                name: name,
                ext: ext,
            }
        } else {
            return {
                root: root,
                dir: "",
                name: "",
                ext: "",
            }
        }
    },
    join: #[desc("Gives the previous path joined with the new path")] (self, path: @string|@path) -> @path {
        return match path {
            @string: @path::new(self.format() + "/" + path),
            @path: @path::new("{}/{}".fmt([self.format(), path.format()])),
        }
    },
    format: #[desc("Formats a path")] (self) -> @string {
        return "{}{}{}{}{}".fmt([
            self.root,
            self.dir,
            "/" if self.dir.length > 0 else "",
            self.name,
            self.ext,
        ])
    },
    basename: #[desc("Returns the basename of the path")] (self) -> @string {
        return "{}{}".fmt([
            self.name,
            self.ext,
        ])
    },

    // helper methods
    is_absolute: #[desc("Returns whether the path is absolute")]
    (self) -> @bool => self.root.length > 0,

    // FS general
    exists: #[desc("Returns whether the path exists")]
    (self) -> @bool {
        return $.fileexists(self.format())
    },
    kind: #[desc("Returns the kind of the file")]
    (self) -> @string {
        return $.filekind(self.format())
    },

    // FS file operations
    read: #[desc("Reads the contents of the file")]
    (self, mode: @string = "text") -> @array|@bool|@dictionary|@number|@string {
        return $.readfile(self.format(), mode)
    },
    write: #[desc("Writes the contents of the file (it will overwrite previous contents)")]
    (self, contents: @string) -> @string {
        return $.writefile(self.format(), contents)
    },
    append: #[desc("Appends the contents of the file")] (self, contents: @string) -> @string {
        return $.writefile($.readfile(self.format()) + contents)
    },
    delete: #[desc("Deletes the file")] (self) -> @string {
        return $.deletefile(self.format())
    },

    // FS directory operations
    readdir: #[desc("Reads the contents of the directory")] (self) -> [@string] {
        return $.readdir(self.format())
    },
    mkdir: #[desc("Creates the directory")] (self) -> @NULL {
        $.mkdir(self.format())
    },
    rmdir: #[desc("Removes the directory")]
    (
        self,
        #[desc("Removes the entire directory with it's contents if set to true (be careful!)")] recursive = false
    ) -> @NULL {
        if recursive {
            $.rmdir_all(self.format())
        } else {
            $.rmdir(self.format())
        }
    },

    // other
    open: #[desc("Gives a @file object of the file")] (self) -> @file {
        return @file::new(self.format())
    },

    // implementations
    _display_: #[desc("Displays the path")] (self) -> @string => self.format(),
}

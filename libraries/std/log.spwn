#[no_std, cache_output]

util = import 'util.spwn'
extract import 'constants.spwn'.colors
import 'chroma.spwn'
import 'dictionary.spwn'
import 'string.spwn'

let data = {
    time_labels: {},
    counts: {},
}

default = 'default'

log_time = (label: @string, time: @number) {
    $.print(
        "{}: {}".fmt([
            label,
            util.prettify_time(time)
        ])
    )
}

#[desc("Runtime logging utility, please call this type with `@log::runtime`.")]
type @runtime_log
impl @runtime_log {
    flash: #[desc('Flashes the background'), example(u"
        while_loop(() => true, (){
            5g!
            @log::runtime::flash()
        }, delay = 1)
    ")](
        color: @chroma = @chroma::from_rgb(1,1,1),
        fade_in: @number = 0.0,
        hold: @number = 0.0,
        fade_out: @number = 0.5,
    ) -> @NULL {
        -> BG.pulse(color, fade_in, hold, fade_out)
        -> GROUND.pulse(color, fade_in, hold, fade_out)
    },
}

#[desc("Logging utility type.")]
type @log
impl @log {
    runtime: @runtime_log,
    time: #[desc("Saves the current time to a given label."), example(u"
        @log::time('heavy calculation')
        // <insert your heavy code here>
        @log::time_end('heavy calculation')
    ")] (label: @string = default) -> @NULL {
        instant = $.time()
        data.time_labels.set(label, instant)
    },
    time_log: #[desc("Logs the time between now and the start of the label."), example(u"
        @log::time('for')
        
        for i in 0..10 {
            @log::time_log('for')
        }
    ")] (label: @string) -> @NULL {
        instant = $.time()
        if !(label in data.time_labels) {
            throw "Label {} not found".fmt(label)
        }
        log_time(label, instant - data.time_labels.get(label))
    },
    time_end: #[desc("Logs the time between now and the start of the label and destroys it."), example(u"
        @log::time('huge loop')

        for i in 0..100000 {}

        @log::time_end('huge loop')
    ", run_test = false)] (label = default) -> @NULL {
        instant = $.time()
        if !(label in data.time_labels) {
            throw "Label {} does not exist".fmt($.display(label))
        }
        log_time(label, instant - data.time_labels.get(label))
        data.time_labels.delete(label)
    },
    count: #[desc("Logs how many times the label got counted."), example(u"
        for i in 0..10 {
            @log::count('my loop')
        }
    ")] (label: @string = default) -> @NULL {
        count = data.counts.get(label) + 1 if label in data.counts else 1
        data.counts.set(label, count)
        $.print("{0}: {1}".fmt([label, count]))
    },
    reset_count: #[desc("Resets the counted amount of the label."), example(u"
        for i in 0..10 {
            @log::count('loop')
        }

        @log::reset_count('loop')

        for i in 0..10 {
            @log::count('loop')
        }
    ")] (label: @string = default) -> @NULL {
        data.counts.set(label, 0)
    },
}

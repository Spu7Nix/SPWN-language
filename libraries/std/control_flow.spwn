#[no_std, cache_output]

constants = import "constants.spwn"

extract constants.obj_props
extract constants.comparisons

wait = #[desc("Adds a delay before the next triggers"), example(u"
	BG.set(rgb8(255, 0, 0)) // turn background red
	wait(2) // wait 2 seconds
	BG.set(rgb8(0, 255, 0)) // turn background green
")] (
	#[desc("Delay time in seconds (leave empty for minimum delay)")]
	time: @number | @epsilon = @epsilon::{}
) -> @NULL {
	if time.type == @epsilon || time > 0 {
		$.add( trigger{
			OBJ_ID: 1268,
			SPAWN_DURATION: time,
			TARGET: !{
				-> return
			},
		})
	} else {
		-> return
	}

}

call_with_delay = #[desc("Call a function after a delay"), example(u"
	BG.set(rgb8(255, 0, 0)) // turn background red
	call_with_delay(2, !{
		BG.set(rgb8(0, 255, 0)) // turn background green 2 seconds later
	})
")] (
	#[desc("Delay time in seconds (leave empty for minimum delay)")] time: @number | @epsilon = @epsilon::{},
	#[desc("Function to call after the delay")] function: @trigger_function | @group
) -> @NULL {
	$.add(trigger{
		OBJ_ID: 1268,
		SPAWN_DURATION: time,
		TARGET: function,
	})
}

-> return {
	wait: wait,
	call_with_delay: call_with_delay,


	suppress_signal: #[desc("Stops signal from coming past for some time"), example(u"
		f = !{
			suppress_signal(1)
			10g.move(10, 0)
		}

		f! // moves
		wait(0.4)
		f! // does nothing
		wait(0.4)
		f! // does nothing
		wait(0.4)
		f! // moves
	")] (
		#[desc("Time to suppress signal")] delay: @number
	) -> @NULL {
		//if checker is 0, a signal can come through
		//if checker is 1, it will be suppressed
		checker = @counter::new(0, reset = false)
		-> (){
			wait(delay)
			if checker.item == 1 {
				checker.item.add(-1)
			}
		}()
		if checker.item == 0 {
			checker.item.add(1)
			-> return
		}


	},

	suppress_signal_forever: #[desc("Stops signal from coming past after call"), example(u"
		f = !{
			suppress_signal_forever()
			10g.move(10, 0)
		}
		f! // moves
		wait(0.4)
		f! // does nothing
		wait(1000)
		f! // does nothing
	")] () -> @NULL {

		checker = @counter::new(0, reset = false)
		if checker.item == 0 {
			checker.item.add(1)
			-> return
		}


	},

	// suppress_signal_quick: #[desc("Stops signal from coming past for some time (better for quick/glitchy signals)")] (
	// 	#[desc("Time to suppress signal")] delay: @number,
	// ){
	// 	//if checker is 0, a signal can come through
	// 	//if checker is 1, it will be suppressed
	// 	checker = @counter::new(0, reset = false)

	// 	-> (){
	// 		checker.item.add(1)
	// 		wait(delay)
	// 		if checker.item == 1 {
	// 			-> return
	// 		}
	// 		wait()
	// 		if checker.item > 1 {
	// 			checker -= 1
	// 		}

	// 	}()



	// },

	suppress_signal_until: #[desc("Suppresses the signal until the desired group or trigger function is called"), example(u"
		func = !{
			suppress_signal_until(5g)
			@log::runtime::flash()
		}

		func! // does nothing
		5g!
		wait(0.4)
		func! // flashes
	")] (
		#[desc("Group or trigger function to call to stop suppression (default: current context)")]
		group: @group | @trigger_function = null,
	) -> @NULL {
		context_func = match group {
			@NULL: $.trigger_fn_context(),
			else: group,
		}

		if context_func == 0g { -> return }

		// 0 = suppressed
		// 1 = not suppressed
		checker = @counter::new(bits = 1, reset = false)

		-> (){
			$.extend_trigger_func(context_func, (){
				if checker == 0 { checker++ }
			})
		}()

		if checker > 0 {
			-> return
		}
	},

	for_loop: #[desc("Implementation of a spawn loop with a counter"), example(u"
		for_loop(0..10, (i) {
			if i < 5 {
				10g.move(-10, 0)
			} else {
				10g.move(10, 0)
			}
		})
	")]
    (
        #[desc("Range of values (for example 0..10)")] range: @range,
	      #[desc("Macro of the code that gets looped, should take the iterator (a counter) as the first argument.")] code: (@counter -> @NULL) | (() -> @NULL), // supposed to be @counter -> @NULL, but @counter isnt defined lol
        #[desc("Delay between loops (less than 0.05 may be unstable)")] delay: @number | @epsilon = @epsilon::{},
        //#[desc("Whether to reset the iterator after looping (only disable if the loop is only triggered once)")] reset: @bool = true,
    ) -> @NULL {
		i = @counter::new(range.start)

        func = !{
            if code is (@counter -> @NULL) {
                code(i)
            } else {
                code()
            }
            wait(delay)
			i.add(range.step_size)
            if range.step_size > 0 {
                if i.item < range.end {
					func!
				}
                if i.item > range.end - 1 {
                    -> return
                }
            } else {
                if i.item > range.end {
					func!
				}
                if i.item < range.end + 1 {
                    -> return
                }
            }
        }

        func!

	}, 

	while_loop: #[desc("Implementation of a conditional spawn loop"), example(u"
		c = counter(11)

		while_loop(() => c > 4, () {
			c -= 2
		})

		// c is now 3
	")]
	(
		#[desc("While loop condition, should return a boolean")] expr: () -> @bool,
		#[desc("Macro of the code that gets looped")] code: () -> @NULL,
		#[desc("Delay between loops (less than 0.05 may be unstable)")] delay: @number | @epsilon = @epsilon::{},
	) -> @NULL {
		func = !{
			if expr() {
				code()
				call_with_delay(delay, func)
			} else {
				-> return
			}
        }

        func!
	},

	do_while_loop: #[desc("Implementation of a conditional spawn loop"), example(u"
		c = counter(4)

		do_while_loop(() => c > 10, () {
			c -= 2
		})

		// c is now 2
	")]
	(
		#[desc("While loop condition, should -> return a boolean")] expr: () -> @bool,
		#[desc("Macro of the code that gets looped")] code: () -> @NULL,
		#[desc("Delay between loops (less than 0.05 may be unstable)")] delay: @number | @epsilon = @epsilon::{},
	) -> @NULL {
		func = !{
			code()
			if expr() {
				call_with_delay(delay, func)
			} else {
				-> return
			}
        }

        func!
	},


}

#[no_std, cache_output]

extract import "constants.spwn".obj_props
import 'array.spwn'

trim = (
    string: @string,
    tokens: @string | [@string],
    left: @bool = false,
    right: @bool = false,
){
    token_check = token => token.length > 0
    let tokens = match tokens {
        [@string]: tokens.filter(token_check),
        @string: tokens.split('').filter(token_check),
    }
    if tokens.length == 0 {return string}
    let start = 0
    let end = string.length
    if left {
        for i in 0..string.length {
            if tokens.contains(string[i]) {
                start = i+1
            } else {break}
        }
    }
    if right {
        for i in (string.length)..0 {
            if tokens.contains(string[i]) {
                end = i
            } else {break}
        }
    }
    return $.substr(string, start, end) if start < end else "" 
}

uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
lowercase = "abcdefghijklmnopqrstuvwxyz"

impl @string {
	is_empty: #[desc("Returns true if the string has a length of 0, false otherwise"), example(u"
        $.assert(''.is_empty())
        $.assert(!('x'.is_empty()))
    ")]
	(self) -> @bool {
		return self.length == 0;
	},
	substr: #[desc("Gets a substring beginning at the specified start and ending at the specified end.")]
	(self, start: @number, end: @number) -> @string {
		let start = start.clamp(0,self.length)
		let end = end.clamp(0,self.length)
		if start == end { return '' }
		if start > end {
			return $.substr(self, end, start).reverse(); // we do a little trolling
		}
		return $.substr(self, start, end);
	},
    overwrite: #[desc("Overwrites a portion of a string with another string."), example(u'
        $.assert("abcdefghij".overwrite(2,5,"thingy") == "abthingyfghij")
    ')]
    (self, start: @number, end: @number, str: @string) -> @string {
        return self.substr(0, start) + str + self.substr(end, self.length)
    },
	join: #[desc("Joins a list using the string."), example(u"
        $.assert(''.join(['a', 'b']) == 'ab')
        $.assert(', '.join(['string', 'element', 'join']) == 'string, element, join')
    ")]
	(self, list: @array) -> @string {
		let out = "";
		for i in 0..list.length {
            if i > 0 {out += self}
			out += @string(list[i]);
		}
		return out;
	},
	split: #[desc("Splits the string by the specified seperator."), example(u"
        $.assert('a b c'.split(' ') == ['a', 'b', 'c'])
        $.assert('example'.split('') == ['e', 'x', 'a', 'm', 'p', 'l', 'e'])

        $.assert('abcdef'.split([3]) == ['abc', 'def'])
        $.assert('example'.split([3,5]) == ['exa', 'mp', 'le'])
    ")]
	(self, split: @string | [@number]) -> [@string] {
        return match split {
            @string: (){
                if split.length == 0 {
                    return self as @array;
                } else {
                    return $.split_str(self, split);
                }
            }(),
            [@number]: (){
                let split = split.filter(>=0).unique().sort()
                let out = [];
                let start = 0;
                for i in 0..split.length {
                    out.push(self.substr(start, split[i]))
                    start = split[i];
                }
                out.push(self.substr(start, self.length));
                return out;
            }(),
        }
	},
	starts_with: #[desc("Checks if the string starts with a string.")]
	(self, substr: @string) -> @bool {
		if substr == '' { return true }
		if substr.length > self.length { return false }
		return self.substr(0, substr.length) == substr;
	},
	ends_with: #[desc("Checks if the string starts with a string.")]
	(self, substr: @string) -> @bool {
		if substr == '' { return true }
		if substr.length > self.length { return false }
		return self.substr(self.length-substr.length, self.length) == substr;
	},
	index: #[desc("Gets the index of a string, if it doesn't exists returns null.")]
	(self, substr: @string) -> @number | @NULL {
		if substr == '' { return null }
		if substr.length > self.length { return null }
		r = self.length - substr.length + 1
		for i in 0..r {
			if $.substr(self, i, i + substr.length) == substr {
				return i
			}
		}
		return null
	},
	contains: #[desc("Checks if the string contains a string.")]
	(self, substr: @string) -> @bool {
		return substr in self
	},
	reverse: #[desc("Reverses the string.")]
	(self) -> @string {
		let ret_str = ""
        for i in 0..self.length {
            ret_str += self[self.length - 1 - i]
        }
        return ret_str
	},
	lowercase: #[desc("Makes whole string lowercase.")]
	(self) -> @string {
        let dict = {}
        for [k, v] in [*[uppercase.split(''), lowercase.split('')]] {
            dict[k] = v
        }
        return ''.join(self.split('').map(c => dict[c] if c in dict else c))
	},
	uppercase: #[desc("Makes whole string uppercase.")]
	(self) -> @string {
        let dict = {}
        for [k, v] in [*[lowercase.split(''), uppercase.split('')]] {
            dict[k] = v
        }
        return ''.join(self.split('').map(c => dict[c] if c in dict else c))
	},
	is_upper: #[desc("Checks if whole string is uppercase, ignores characters that is not in the alphabet.")]
	(self) -> @bool {
		return self.uppercase() == self
	},
	is_lower: #[desc("Checks if whole string is lowercase, ignores characters that is not in the alphabet.")]
	(self) -> @bool {
		return self.lowercase() == self
	},
    l_pad: #[desc("Returns a left-padded version of the string")]
    (self, times: @number, seq: @string = ' ') -> @string {
        if self.length >= times { return self }
        pad = seq if seq.length > 0 else ' '
        len = [times-self.length, 0].max()
        mul = $.ceil(len / pad.length)
        return (pad * mul).substr(0, len) + self
    },
    r_pad: #[desc("Returns a right-padded version of the string")]
    (self, times: @number, seq: @string = ' ') -> @string {
        if self.length >= times { return self }
        pad = seq if seq.length > 0 else ' '
        len = [times-self.length, 0].max()
        mul = $.ceil(len / pad.length)
        return self + (pad * mul).substr(0, len)
    },
    l_trim: #[desc("Returns a left-trimmed verison of the string"), example(u"
        str1 = '      abcd g    '
        str2 = '   pog  __'
        $.assert(str1.l_trim() == 'abcd g    ')
        $.assert(str2.l_trim() == 'pog  __')
    ")]
    (self, tokens: @string | [@string] = [' ','\n','\t','\r','\a','\b','\v','\e']) -> @string {
        return trim(self, tokens, left = true)
    },
    r_trim: #[desc("Returns a right-trimmed version of the string"), example(u"
        str = 'abcd      '
        str2 = '      abcd g    '
        str3 = '   pog  __'
        $.assert(str.r_trim() == 'abcd')
        $.assert(str2.r_trim() == '      abcd g')
        $.assert(str3.r_trim(tokens = [' ', '_']) == '   pog')    
    ")]
    (self, tokens: @string | [@string] = [' ','\n','\t','\r','\a','\b','\v','\e']) -> @string {
        return trim(self, tokens, right = true)
    },
    trim: #[desc("Returns a trimmed version of the string"), example(u"
        str = 'abcd      '
        str2 = '      abcd g    '
        str3 = '   pog  __'
        $.assert(str.trim() == 'abcd')
        $.assert(str2.trim() == 'abcd g')
        $.assert(str3.trim(tokens = [' ', '_']) == 'pog')
    ")]
    (self, tokens: @string | [@string] = [' ','\n','\t','\r']) -> @string {
        return trim(self, tokens, left = true, right = true)
    },
    fmt: #[desc("Returns a formtted version of the string. Accepts either a single argument or an array"), example(u"
        name1 = 'bob'
        name2 = 'alice'
        $.assert('hi {}'.fmt(name1) == 'hi bob')
        $.assert('hi {} and {}'.fmt([name1, name2]) == 'hi bob and alice')
        $.assert('hi {1} and {0}'.fmt([name1, name2]) == 'hi alice and bob')
        $.assert('{} has {} apples'.fmt([name1, 5]) == 'bob has 5 apples')
    ")]
    (self, subs) -> @string {
        blank_regex = "\\{\\}"
        numbered_regex = "\\{\\d+\\}"

        blanks = $.regex(blank_regex, self, 'find_all', null)
        numbered = $.regex(numbered_regex, self, 'find_all', null)

        if blanks.length != 0 && numbered.length != 0 {
            throw "FormatError: String format must only be either blank {} or numbered {1} {2}"
        }

        // turn single arg into array
        let args = subs if subs.type == @array else [subs]

        let ret_str = ""

        if blanks.length != 0 {
            if blanks.length != args.length {
                throw "FormatError: number of formats must be the same as number of args"
            }

            splitted = self.split("{}")

            for i in 0..args.length {
                ret_str += splitted[i] + (args[i] as @string)
            }
            ret_str += splitted[-1]

        } else if numbered.length != 0 {
            // im not gonna make the error handling here better
            // maybe later, we can make it so any brace that has a number greater than args MUST be escpaed, but now it will be ignored

            ret_str = self

            for i in 0..args.length {
                ret_str = $.regex("\\{" + i as @string + "\\}", ret_str, "replace", args[i] as @string)
            }
            
        } else {
            ret_str = self
        }

        return ret_str
    },

    find: (self, re: @string) -> @bool {
        return $.regex(re, self, "match", null)
    },

    find_all: (self, re: @string) -> [[@number]] {
        return $.regex(re, self, "find_all", null)
    },

    replace: (self, re: @string, replacement: @string) -> @string {
        return $.regex(re, self, "replace", replacement)
    },

    to_obj: #[desc("Returns a text object with the string as text"), example(u'
        extract obj_props
        "hello".to_obj().with(X, 45).with(Y, 45).add()
    ')] (self) -> @object {
        return obj {
            OBJ_ID: 914,
            TEXT: $.b64encode(self),
        }
    },
    
    is_digit: #[desc("Returns true if the string is made of digits"), example(u'
        $.assert("123".is_digit() == true)
        $.assert("123.45".is_digit() == false)
    ')] (self) -> @bool {
        return $.regex(r"^\d+$", self, "match", null)
    },

    is_decimal: #[desc("Returns true if the string is made of digits and a decimal point"), example(u'
        $.assert("123.45".is_decimal() == true)
        $.assert("123".is_decimal() == false)
    ')] (self) -> @bool {
        return $.regex(r"^\d+\.\d+$", self, "match", null)
    },

    is_alpha: #[desc("Returns true if the string is made of letters"), example(u'
        $.assert("abc".is_alpha() == true)
        $.assert("123".is_alpha() == false)
    ')] (self) -> @bool {
        return $.regex(r"^[a-zA-Z]+$", self, "match", null)
    },

}

extract obj_props

// Triggers and groups
follow_x_group = ?g
follow_y_group = ?g
hidden_group = ?g

-> hidden_group.alpha(0)
-> follow_x_group.lock_to_player(lock_x = true, lock_y = false)
-> follow_x_group.move(x = 0, y = 5, duration = 0.01)
-> follow_y_group.follow_player_y()
-> hide_player()

// Portals
$.add(obj {
	OBJ_ID: obj_ids.portals.DUAL_ON,
	X: 0,
	Y: 30,
	GROUPS: hidden_group,
})
$.add(obj {
	OBJ_ID: obj_ids.portals.WAVE,
	X: 0,
	Y: 30,
	GROUPS: hidden_group,
})
$.add(obj {
	OBJ_ID: obj_ids.portals.SIZE_MINI,
	X: 0,
	Y: 30,
	GROUPS: hidden_group,
})

// Top and bottom blocks
$.add(obj {
	OBJ_ID: 1,
	X: 0,
	Y: 33,
	GROUPS: [ hidden_group, follow_x_group ],
})
$.add(obj {
	OBJ_ID: 1,
	X: 0,
	Y: -12,
	GROUPS: [ hidden_group, follow_x_group ],
})


// Collision blocks
player_block = ?b
collide_block = ?b

$.add(obj {
	OBJ_ID: obj_ids.special.COLLISION_BLOCK,
	DYNAMIC_BLOCK: true,
	BLOCK_A: player_block,
	X: 0,
	Y: 0,
	GROUPS: [ hidden_group, follow_x_group, follow_y_group ],
})
$.add(obj {
	OBJ_ID: obj_ids.special.COLLISION_BLOCK,
	DYNAMIC_BLOCK: false,
	BLOCK_A: collide_block,
	X: 0,
	Y: 37,
	GROUPS: [ hidden_group, follow_x_group ],
})

// D block
$.add(obj {
	OBJ_ID: obj_ids.special.D_BLOCK,
	SCALING: 2,
	X: 0,
	Y: 15,
	GROUPS: [ hidden_group, follow_x_group ],
})

return {
	button_a: #[desc("Returns an event for when button A is pressed (the right side by default)")] () {
		return collision(player_block, collide_block)
	},
	button_b: #[desc("Returns an event for when button B is pressed (the left side by default)")] () {
		return touch(dual_side = true)
	},
	button_a_end: #[desc("Returns an event for when button A is released (the right side by default)")] () {
		return collision_exit(player_block, collide_block)
	},
	button_b_end: #[desc("Returns an event for when button B is released (the left side by default)")] () {
		return touch_end(dual_side = true)
	},
	hidden_group: #[desc("A group that is hidden (alpha = 0)")] hidden_group,
}

